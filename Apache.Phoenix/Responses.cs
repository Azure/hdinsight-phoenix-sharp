// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: responses.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apache.Phoenix {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Responses {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Responses() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9yZXNwb25zZXMucHJvdG8aDGNvbW1vbi5wcm90byLJAQoRUmVzdWx0U2V0", 
            "UmVzcG9uc2USFQoNY29ubmVjdGlvbl9pZBgBIAEoCRIUCgxzdGF0ZW1lbnRf", 
            "aWQYAiABKA0SFQoNb3duX3N0YXRlbWVudBgDIAEoCBIdCglzaWduYXR1cmUY", 
            "BCABKAsyCi5TaWduYXR1cmUSGwoLZmlyc3RfZnJhbWUYBSABKAsyBi5GcmFt", 
            "ZRIUCgx1cGRhdGVfY291bnQYBiABKAQSHgoIbWV0YWRhdGEYByABKAsyDC5S", 
            "cGNNZXRhZGF0YSJxCg9FeGVjdXRlUmVzcG9uc2USIwoHcmVzdWx0cxgBIAMo", 
            "CzISLlJlc3VsdFNldFJlc3BvbnNlEhkKEW1pc3Npbmdfc3RhdGVtZW50GAIg", 
            "ASgIEh4KCG1ldGFkYXRhGAMgASgLMgwuUnBjTWV0YWRhdGEiVgoPUHJlcGFy", 
            "ZVJlc3BvbnNlEiMKCXN0YXRlbWVudBgBIAEoCzIQLlN0YXRlbWVudEhhbmRs", 
            "ZRIeCghtZXRhZGF0YRgCIAEoCzIMLlJwY01ldGFkYXRhInoKDUZldGNoUmVz", 
            "cG9uc2USFQoFZnJhbWUYASABKAsyBi5GcmFtZRIZChFtaXNzaW5nX3N0YXRl", 
            "bWVudBgCIAEoCBIXCg9taXNzaW5nX3Jlc3VsdHMYAyABKAgSHgoIbWV0YWRh", 
            "dGEYBCABKAsyDC5ScGNNZXRhZGF0YSJmChdDcmVhdGVTdGF0ZW1lbnRSZXNw", 
            "b25zZRIVCg1jb25uZWN0aW9uX2lkGAEgASgJEhQKDHN0YXRlbWVudF9pZBgC", 
            "IAEoDRIeCghtZXRhZGF0YRgDIAEoCzIMLlJwY01ldGFkYXRhIjgKFkNsb3Nl", 
            "U3RhdGVtZW50UmVzcG9uc2USHgoIbWV0YWRhdGEYASABKAsyDC5ScGNNZXRh", 
            "ZGF0YSI4ChZPcGVuQ29ubmVjdGlvblJlc3BvbnNlEh4KCG1ldGFkYXRhGAEg", 
            "ASgLMgwuUnBjTWV0YWRhdGEiOQoXQ2xvc2VDb25uZWN0aW9uUmVzcG9uc2US", 
            "HgoIbWV0YWRhdGEYASABKAsyDC5ScGNNZXRhZGF0YSJjChZDb25uZWN0aW9u", 
            "U3luY1Jlc3BvbnNlEikKCmNvbm5fcHJvcHMYASABKAsyFS5Db25uZWN0aW9u", 
            "UHJvcGVydGllcxIeCghtZXRhZGF0YRgCIAEoCzIMLlJwY01ldGFkYXRhInUK", 
            "F0RhdGFiYXNlUHJvcGVydHlFbGVtZW50Eh4KA2tleRgBIAEoCzIRLkRhdGFi", 
            "YXNlUHJvcGVydHkSGgoFdmFsdWUYAiABKAsyCy5UeXBlZFZhbHVlEh4KCG1l", 
            "dGFkYXRhGAMgASgLMgwuUnBjTWV0YWRhdGEiYwoYRGF0YWJhc2VQcm9wZXJ0", 
            "eVJlc3BvbnNlEicKBXByb3BzGAEgAygLMhguRGF0YWJhc2VQcm9wZXJ0eUVs", 
            "ZW1lbnQSHgoIbWV0YWRhdGEYAiABKAsyDC5ScGNNZXRhZGF0YSK2AQoNRXJy", 
            "b3JSZXNwb25zZRISCgpleGNlcHRpb25zGAEgAygJEhYKDmhhc19leGNlcHRp", 
            "b25zGAcgASgIEhUKDWVycm9yX21lc3NhZ2UYAiABKAkSGwoIc2V2ZXJpdHkY", 
            "AyABKA4yCS5TZXZlcml0eRISCgplcnJvcl9jb2RlGAQgASgNEhEKCXNxbF9z", 
            "dGF0ZRgFIAEoCRIeCghtZXRhZGF0YRgGIAEoCzIMLlJwY01ldGFkYXRhImYK", 
            "E1N5bmNSZXN1bHRzUmVzcG9uc2USGQoRbWlzc2luZ19zdGF0ZW1lbnQYASAB", 
            "KAgSFAoMbW9yZV9yZXN1bHRzGAIgASgIEh4KCG1ldGFkYXRhGAMgASgLMgwu", 
            "UnBjTWV0YWRhdGEiJQoLUnBjTWV0YWRhdGESFgoOc2VydmVyX2FkZHJlc3MY", 
            "ASABKAkiEAoOQ29tbWl0UmVzcG9uc2UiEgoQUm9sbGJhY2tSZXNwb25zZSKV", 
            "AQoURXhlY3V0ZUJhdGNoUmVzcG9uc2USFQoNY29ubmVjdGlvbl9pZBgBIAEo", 
            "CRIUCgxzdGF0ZW1lbnRfaWQYAiABKA0SFQoNdXBkYXRlX2NvdW50cxgDIAMo", 
            "DRIZChFtaXNzaW5nX3N0YXRlbWVudBgEIAEoCBIeCghtZXRhZGF0YRgFIAEo", 
            "CzIMLlJwY01ldGFkYXRhQjMKIG9yZy5hcGFjaGUuY2FsY2l0ZS5hdmF0aWNh", 
            "LnByb3RvqgIOQXBhY2hlLlBob2VuaXhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { global::Apache.Phoenix.Common.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.ResultSetResponse), new[]{ "ConnectionId", "StatementId", "OwnStatement", "Signature", "FirstFrame", "UpdateCount", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.ExecuteResponse), new[]{ "Results", "MissingStatement", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.PrepareResponse), new[]{ "Statement", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.FetchResponse), new[]{ "Frame", "MissingStatement", "MissingResults", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.CreateStatementResponse), new[]{ "ConnectionId", "StatementId", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.CloseStatementResponse), new[]{ "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.OpenConnectionResponse), new[]{ "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.CloseConnectionResponse), new[]{ "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.ConnectionSyncResponse), new[]{ "ConnProps", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.DatabasePropertyElement), new[]{ "Key", "Value", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.DatabasePropertyResponse), new[]{ "Props", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.ErrorResponse), new[]{ "Exceptions", "HasExceptions", "ErrorMessage", "Severity", "ErrorCode", "SqlState", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.SyncResultsResponse), new[]{ "MissingStatement", "MoreResults", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.RpcMetadata), new[]{ "ServerAddress" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.CommitResponse), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.RollbackResponse), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.ExecuteBatchResponse), new[]{ "ConnectionId", "StatementId", "UpdateCounts", "MissingStatement", "Metadata" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ResultSetResponse : pb::IMessage<ResultSetResponse> {
    private static readonly pb::MessageParser<ResultSetResponse> _parser = new pb::MessageParser<ResultSetResponse>(() => new ResultSetResponse());
    public static pb::MessageParser<ResultSetResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ResultSetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ResultSetResponse(ResultSetResponse other) : this() {
      connectionId_ = other.connectionId_;
      statementId_ = other.statementId_;
      ownStatement_ = other.ownStatement_;
      Signature = other.signature_ != null ? other.Signature.Clone() : null;
      FirstFrame = other.firstFrame_ != null ? other.FirstFrame.Clone() : null;
      updateCount_ = other.updateCount_;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public ResultSetResponse Clone() {
      return new ResultSetResponse(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StatementIdFieldNumber = 2;
    private uint statementId_;
    public uint StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    public const int OwnStatementFieldNumber = 3;
    private bool ownStatement_;
    public bool OwnStatement {
      get { return ownStatement_; }
      set {
        ownStatement_ = value;
      }
    }

    public const int SignatureFieldNumber = 4;
    private global::Apache.Phoenix.Signature signature_;
    public global::Apache.Phoenix.Signature Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    public const int FirstFrameFieldNumber = 5;
    private global::Apache.Phoenix.Frame firstFrame_;
    public global::Apache.Phoenix.Frame FirstFrame {
      get { return firstFrame_; }
      set {
        firstFrame_ = value;
      }
    }

    public const int UpdateCountFieldNumber = 6;
    private ulong updateCount_;
    public ulong UpdateCount {
      get { return updateCount_; }
      set {
        updateCount_ = value;
      }
    }

    public const int MetadataFieldNumber = 7;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ResultSetResponse);
    }

    public bool Equals(ResultSetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (StatementId != other.StatementId) return false;
      if (OwnStatement != other.OwnStatement) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      if (!object.Equals(FirstFrame, other.FirstFrame)) return false;
      if (UpdateCount != other.UpdateCount) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      if (OwnStatement != false) hash ^= OwnStatement.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      if (firstFrame_ != null) hash ^= FirstFrame.GetHashCode();
      if (UpdateCount != 0UL) hash ^= UpdateCount.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (StatementId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatementId);
      }
      if (OwnStatement != false) {
        output.WriteRawTag(24);
        output.WriteBool(OwnStatement);
      }
      if (signature_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Signature);
      }
      if (firstFrame_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FirstFrame);
      }
      if (UpdateCount != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(UpdateCount);
      }
      if (metadata_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatementId);
      }
      if (OwnStatement != false) {
        size += 1 + 1;
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      if (firstFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstFrame);
      }
      if (UpdateCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpdateCount);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(ResultSetResponse other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      if (other.OwnStatement != false) {
        OwnStatement = other.OwnStatement;
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          signature_ = new global::Apache.Phoenix.Signature();
        }
        Signature.MergeFrom(other.Signature);
      }
      if (other.firstFrame_ != null) {
        if (firstFrame_ == null) {
          firstFrame_ = new global::Apache.Phoenix.Frame();
        }
        FirstFrame.MergeFrom(other.FirstFrame);
      }
      if (other.UpdateCount != 0UL) {
        UpdateCount = other.UpdateCount;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            StatementId = input.ReadUInt32();
            break;
          }
          case 24: {
            OwnStatement = input.ReadBool();
            break;
          }
          case 34: {
            if (signature_ == null) {
              signature_ = new global::Apache.Phoenix.Signature();
            }
            input.ReadMessage(signature_);
            break;
          }
          case 42: {
            if (firstFrame_ == null) {
              firstFrame_ = new global::Apache.Phoenix.Frame();
            }
            input.ReadMessage(firstFrame_);
            break;
          }
          case 48: {
            UpdateCount = input.ReadUInt64();
            break;
          }
          case 58: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExecuteResponse : pb::IMessage<ExecuteResponse> {
    private static readonly pb::MessageParser<ExecuteResponse> _parser = new pb::MessageParser<ExecuteResponse>(() => new ExecuteResponse());
    public static pb::MessageParser<ExecuteResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ExecuteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ExecuteResponse(ExecuteResponse other) : this() {
      results_ = other.results_.Clone();
      missingStatement_ = other.missingStatement_;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public ExecuteResponse Clone() {
      return new ExecuteResponse(this);
    }

    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.ResultSetResponse> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::Apache.Phoenix.ResultSetResponse.Parser);
    private readonly pbc::RepeatedField<global::Apache.Phoenix.ResultSetResponse> results_ = new pbc::RepeatedField<global::Apache.Phoenix.ResultSetResponse>();
    public pbc::RepeatedField<global::Apache.Phoenix.ResultSetResponse> Results {
      get { return results_; }
    }

    public const int MissingStatementFieldNumber = 2;
    private bool missingStatement_;
    public bool MissingStatement {
      get { return missingStatement_; }
      set {
        missingStatement_ = value;
      }
    }

    public const int MetadataFieldNumber = 3;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ExecuteResponse);
    }

    public bool Equals(ExecuteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      if (MissingStatement != other.MissingStatement) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (MissingStatement != false) hash ^= MissingStatement.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (MissingStatement != false) {
        output.WriteRawTag(16);
        output.WriteBool(MissingStatement);
      }
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (MissingStatement != false) {
        size += 1 + 1;
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(ExecuteResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      if (other.MissingStatement != false) {
        MissingStatement = other.MissingStatement;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 16: {
            MissingStatement = input.ReadBool();
            break;
          }
          case 26: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PrepareResponse : pb::IMessage<PrepareResponse> {
    private static readonly pb::MessageParser<PrepareResponse> _parser = new pb::MessageParser<PrepareResponse>(() => new PrepareResponse());
    public static pb::MessageParser<PrepareResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PrepareResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PrepareResponse(PrepareResponse other) : this() {
      Statement = other.statement_ != null ? other.Statement.Clone() : null;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public PrepareResponse Clone() {
      return new PrepareResponse(this);
    }

    public const int StatementFieldNumber = 1;
    private global::Apache.Phoenix.StatementHandle statement_;
    public global::Apache.Phoenix.StatementHandle Statement {
      get { return statement_; }
      set {
        statement_ = value;
      }
    }

    public const int MetadataFieldNumber = 2;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PrepareResponse);
    }

    public bool Equals(PrepareResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Statement, other.Statement)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (statement_ != null) hash ^= Statement.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (statement_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Statement);
      }
      if (metadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (statement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Statement);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(PrepareResponse other) {
      if (other == null) {
        return;
      }
      if (other.statement_ != null) {
        if (statement_ == null) {
          statement_ = new global::Apache.Phoenix.StatementHandle();
        }
        Statement.MergeFrom(other.Statement);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (statement_ == null) {
              statement_ = new global::Apache.Phoenix.StatementHandle();
            }
            input.ReadMessage(statement_);
            break;
          }
          case 18: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FetchResponse : pb::IMessage<FetchResponse> {
    private static readonly pb::MessageParser<FetchResponse> _parser = new pb::MessageParser<FetchResponse>(() => new FetchResponse());
    public static pb::MessageParser<FetchResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FetchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FetchResponse(FetchResponse other) : this() {
      Frame = other.frame_ != null ? other.Frame.Clone() : null;
      missingStatement_ = other.missingStatement_;
      missingResults_ = other.missingResults_;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public FetchResponse Clone() {
      return new FetchResponse(this);
    }

    public const int FrameFieldNumber = 1;
    private global::Apache.Phoenix.Frame frame_;
    public global::Apache.Phoenix.Frame Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    public const int MissingStatementFieldNumber = 2;
    private bool missingStatement_;
    public bool MissingStatement {
      get { return missingStatement_; }
      set {
        missingStatement_ = value;
      }
    }

    public const int MissingResultsFieldNumber = 3;
    private bool missingResults_;
    public bool MissingResults {
      get { return missingResults_; }
      set {
        missingResults_ = value;
      }
    }

    public const int MetadataFieldNumber = 4;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FetchResponse);
    }

    public bool Equals(FetchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Frame, other.Frame)) return false;
      if (MissingStatement != other.MissingStatement) return false;
      if (MissingResults != other.MissingResults) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (frame_ != null) hash ^= Frame.GetHashCode();
      if (MissingStatement != false) hash ^= MissingStatement.GetHashCode();
      if (MissingResults != false) hash ^= MissingResults.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (frame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Frame);
      }
      if (MissingStatement != false) {
        output.WriteRawTag(16);
        output.WriteBool(MissingStatement);
      }
      if (MissingResults != false) {
        output.WriteRawTag(24);
        output.WriteBool(MissingResults);
      }
      if (metadata_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (frame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frame);
      }
      if (MissingStatement != false) {
        size += 1 + 1;
      }
      if (MissingResults != false) {
        size += 1 + 1;
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(FetchResponse other) {
      if (other == null) {
        return;
      }
      if (other.frame_ != null) {
        if (frame_ == null) {
          frame_ = new global::Apache.Phoenix.Frame();
        }
        Frame.MergeFrom(other.Frame);
      }
      if (other.MissingStatement != false) {
        MissingStatement = other.MissingStatement;
      }
      if (other.MissingResults != false) {
        MissingResults = other.MissingResults;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (frame_ == null) {
              frame_ = new global::Apache.Phoenix.Frame();
            }
            input.ReadMessage(frame_);
            break;
          }
          case 16: {
            MissingStatement = input.ReadBool();
            break;
          }
          case 24: {
            MissingResults = input.ReadBool();
            break;
          }
          case 34: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateStatementResponse : pb::IMessage<CreateStatementResponse> {
    private static readonly pb::MessageParser<CreateStatementResponse> _parser = new pb::MessageParser<CreateStatementResponse>(() => new CreateStatementResponse());
    public static pb::MessageParser<CreateStatementResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CreateStatementResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CreateStatementResponse(CreateStatementResponse other) : this() {
      connectionId_ = other.connectionId_;
      statementId_ = other.statementId_;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public CreateStatementResponse Clone() {
      return new CreateStatementResponse(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StatementIdFieldNumber = 2;
    private uint statementId_;
    public uint StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    public const int MetadataFieldNumber = 3;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CreateStatementResponse);
    }

    public bool Equals(CreateStatementResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (StatementId != other.StatementId) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (StatementId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatementId);
      }
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatementId);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(CreateStatementResponse other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            StatementId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CloseStatementResponse : pb::IMessage<CloseStatementResponse> {
    private static readonly pb::MessageParser<CloseStatementResponse> _parser = new pb::MessageParser<CloseStatementResponse>(() => new CloseStatementResponse());
    public static pb::MessageParser<CloseStatementResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CloseStatementResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CloseStatementResponse(CloseStatementResponse other) : this() {
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public CloseStatementResponse Clone() {
      return new CloseStatementResponse(this);
    }

    public const int MetadataFieldNumber = 1;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CloseStatementResponse);
    }

    public bool Equals(CloseStatementResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(CloseStatementResponse other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OpenConnectionResponse : pb::IMessage<OpenConnectionResponse> {
    private static readonly pb::MessageParser<OpenConnectionResponse> _parser = new pb::MessageParser<OpenConnectionResponse>(() => new OpenConnectionResponse());
    public static pb::MessageParser<OpenConnectionResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public OpenConnectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public OpenConnectionResponse(OpenConnectionResponse other) : this() {
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public OpenConnectionResponse Clone() {
      return new OpenConnectionResponse(this);
    }

    public const int MetadataFieldNumber = 1;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as OpenConnectionResponse);
    }

    public bool Equals(OpenConnectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(OpenConnectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CloseConnectionResponse : pb::IMessage<CloseConnectionResponse> {
    private static readonly pb::MessageParser<CloseConnectionResponse> _parser = new pb::MessageParser<CloseConnectionResponse>(() => new CloseConnectionResponse());
    public static pb::MessageParser<CloseConnectionResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CloseConnectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CloseConnectionResponse(CloseConnectionResponse other) : this() {
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public CloseConnectionResponse Clone() {
      return new CloseConnectionResponse(this);
    }

    public const int MetadataFieldNumber = 1;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CloseConnectionResponse);
    }

    public bool Equals(CloseConnectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(CloseConnectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConnectionSyncResponse : pb::IMessage<ConnectionSyncResponse> {
    private static readonly pb::MessageParser<ConnectionSyncResponse> _parser = new pb::MessageParser<ConnectionSyncResponse>(() => new ConnectionSyncResponse());
    public static pb::MessageParser<ConnectionSyncResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ConnectionSyncResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConnectionSyncResponse(ConnectionSyncResponse other) : this() {
      ConnProps = other.connProps_ != null ? other.ConnProps.Clone() : null;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public ConnectionSyncResponse Clone() {
      return new ConnectionSyncResponse(this);
    }

    public const int ConnPropsFieldNumber = 1;
    private global::Apache.Phoenix.ConnectionProperties connProps_;
    public global::Apache.Phoenix.ConnectionProperties ConnProps {
      get { return connProps_; }
      set {
        connProps_ = value;
      }
    }

    public const int MetadataFieldNumber = 2;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConnectionSyncResponse);
    }

    public bool Equals(ConnectionSyncResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConnProps, other.ConnProps)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (connProps_ != null) hash ^= ConnProps.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (connProps_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConnProps);
      }
      if (metadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (connProps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnProps);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(ConnectionSyncResponse other) {
      if (other == null) {
        return;
      }
      if (other.connProps_ != null) {
        if (connProps_ == null) {
          connProps_ = new global::Apache.Phoenix.ConnectionProperties();
        }
        ConnProps.MergeFrom(other.ConnProps);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (connProps_ == null) {
              connProps_ = new global::Apache.Phoenix.ConnectionProperties();
            }
            input.ReadMessage(connProps_);
            break;
          }
          case 18: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DatabasePropertyElement : pb::IMessage<DatabasePropertyElement> {
    private static readonly pb::MessageParser<DatabasePropertyElement> _parser = new pb::MessageParser<DatabasePropertyElement>(() => new DatabasePropertyElement());
    public static pb::MessageParser<DatabasePropertyElement> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DatabasePropertyElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DatabasePropertyElement(DatabasePropertyElement other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      Value = other.value_ != null ? other.Value.Clone() : null;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public DatabasePropertyElement Clone() {
      return new DatabasePropertyElement(this);
    }

    public const int KeyFieldNumber = 1;
    private global::Apache.Phoenix.DatabaseProperty key_;
    public global::Apache.Phoenix.DatabaseProperty Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public const int ValueFieldNumber = 2;
    private global::Apache.Phoenix.TypedValue value_;
    public global::Apache.Phoenix.TypedValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public const int MetadataFieldNumber = 3;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DatabasePropertyElement);
    }

    public bool Equals(DatabasePropertyElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(DatabasePropertyElement other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Apache.Phoenix.DatabaseProperty();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Apache.Phoenix.TypedValue();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Apache.Phoenix.DatabaseProperty();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Apache.Phoenix.TypedValue();
            }
            input.ReadMessage(value_);
            break;
          }
          case 26: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DatabasePropertyResponse : pb::IMessage<DatabasePropertyResponse> {
    private static readonly pb::MessageParser<DatabasePropertyResponse> _parser = new pb::MessageParser<DatabasePropertyResponse>(() => new DatabasePropertyResponse());
    public static pb::MessageParser<DatabasePropertyResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DatabasePropertyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DatabasePropertyResponse(DatabasePropertyResponse other) : this() {
      props_ = other.props_.Clone();
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public DatabasePropertyResponse Clone() {
      return new DatabasePropertyResponse(this);
    }

    public const int PropsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.DatabasePropertyElement> _repeated_props_codec
        = pb::FieldCodec.ForMessage(10, global::Apache.Phoenix.DatabasePropertyElement.Parser);
    private readonly pbc::RepeatedField<global::Apache.Phoenix.DatabasePropertyElement> props_ = new pbc::RepeatedField<global::Apache.Phoenix.DatabasePropertyElement>();
    public pbc::RepeatedField<global::Apache.Phoenix.DatabasePropertyElement> Props {
      get { return props_; }
    }

    public const int MetadataFieldNumber = 2;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DatabasePropertyResponse);
    }

    public bool Equals(DatabasePropertyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!props_.Equals(other.props_)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= props_.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      props_.WriteTo(output, _repeated_props_codec);
      if (metadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += props_.CalculateSize(_repeated_props_codec);
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(DatabasePropertyResponse other) {
      if (other == null) {
        return;
      }
      props_.Add(other.props_);
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
          case 18: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ErrorResponse : pb::IMessage<ErrorResponse> {
    private static readonly pb::MessageParser<ErrorResponse> _parser = new pb::MessageParser<ErrorResponse>(() => new ErrorResponse());
    public static pb::MessageParser<ErrorResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ErrorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ErrorResponse(ErrorResponse other) : this() {
      exceptions_ = other.exceptions_.Clone();
      hasExceptions_ = other.hasExceptions_;
      errorMessage_ = other.errorMessage_;
      severity_ = other.severity_;
      errorCode_ = other.errorCode_;
      sqlState_ = other.sqlState_;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public ErrorResponse Clone() {
      return new ErrorResponse(this);
    }

    public const int ExceptionsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_exceptions_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> exceptions_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Exceptions {
      get { return exceptions_; }
    }

    public const int HasExceptionsFieldNumber = 7;
    private bool hasExceptions_;
    public bool HasExceptions {
      get { return hasExceptions_; }
      set {
        hasExceptions_ = value;
      }
    }

    public const int ErrorMessageFieldNumber = 2;
    private string errorMessage_ = "";
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SeverityFieldNumber = 3;
    private global::Apache.Phoenix.Severity severity_ = global::Apache.Phoenix.Severity.UNKNOWN_SEVERITY;
    public global::Apache.Phoenix.Severity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    public const int ErrorCodeFieldNumber = 4;
    private uint errorCode_;
    public uint ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    public const int SqlStateFieldNumber = 5;
    private string sqlState_ = "";
    public string SqlState {
      get { return sqlState_; }
      set {
        sqlState_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int MetadataFieldNumber = 6;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ErrorResponse);
    }

    public bool Equals(ErrorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!exceptions_.Equals(other.exceptions_)) return false;
      if (HasExceptions != other.HasExceptions) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (Severity != other.Severity) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (SqlState != other.SqlState) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= exceptions_.GetHashCode();
      if (HasExceptions != false) hash ^= HasExceptions.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (Severity != global::Apache.Phoenix.Severity.UNKNOWN_SEVERITY) hash ^= Severity.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (SqlState.Length != 0) hash ^= SqlState.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      exceptions_.WriteTo(output, _repeated_exceptions_codec);
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMessage);
      }
      if (Severity != global::Apache.Phoenix.Severity.UNKNOWN_SEVERITY) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Severity);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ErrorCode);
      }
      if (SqlState.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SqlState);
      }
      if (metadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Metadata);
      }
      if (HasExceptions != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasExceptions);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += exceptions_.CalculateSize(_repeated_exceptions_codec);
      if (HasExceptions != false) {
        size += 1 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (Severity != global::Apache.Phoenix.Severity.UNKNOWN_SEVERITY) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCode);
      }
      if (SqlState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SqlState);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(ErrorResponse other) {
      if (other == null) {
        return;
      }
      exceptions_.Add(other.exceptions_);
      if (other.HasExceptions != false) {
        HasExceptions = other.HasExceptions;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.Severity != global::Apache.Phoenix.Severity.UNKNOWN_SEVERITY) {
        Severity = other.Severity;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.SqlState.Length != 0) {
        SqlState = other.SqlState;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            exceptions_.AddEntriesFrom(input, _repeated_exceptions_codec);
            break;
          }
          case 18: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 24: {
            severity_ = (global::Apache.Phoenix.Severity) input.ReadEnum();
            break;
          }
          case 32: {
            ErrorCode = input.ReadUInt32();
            break;
          }
          case 42: {
            SqlState = input.ReadString();
            break;
          }
          case 50: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 56: {
            HasExceptions = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SyncResultsResponse : pb::IMessage<SyncResultsResponse> {
    private static readonly pb::MessageParser<SyncResultsResponse> _parser = new pb::MessageParser<SyncResultsResponse>(() => new SyncResultsResponse());
    public static pb::MessageParser<SyncResultsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SyncResultsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SyncResultsResponse(SyncResultsResponse other) : this() {
      missingStatement_ = other.missingStatement_;
      moreResults_ = other.moreResults_;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public SyncResultsResponse Clone() {
      return new SyncResultsResponse(this);
    }

    public const int MissingStatementFieldNumber = 1;
    private bool missingStatement_;
    public bool MissingStatement {
      get { return missingStatement_; }
      set {
        missingStatement_ = value;
      }
    }

    public const int MoreResultsFieldNumber = 2;
    private bool moreResults_;
    public bool MoreResults {
      get { return moreResults_; }
      set {
        moreResults_ = value;
      }
    }

    public const int MetadataFieldNumber = 3;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SyncResultsResponse);
    }

    public bool Equals(SyncResultsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissingStatement != other.MissingStatement) return false;
      if (MoreResults != other.MoreResults) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MissingStatement != false) hash ^= MissingStatement.GetHashCode();
      if (MoreResults != false) hash ^= MoreResults.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MissingStatement != false) {
        output.WriteRawTag(8);
        output.WriteBool(MissingStatement);
      }
      if (MoreResults != false) {
        output.WriteRawTag(16);
        output.WriteBool(MoreResults);
      }
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MissingStatement != false) {
        size += 1 + 1;
      }
      if (MoreResults != false) {
        size += 1 + 1;
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(SyncResultsResponse other) {
      if (other == null) {
        return;
      }
      if (other.MissingStatement != false) {
        MissingStatement = other.MissingStatement;
      }
      if (other.MoreResults != false) {
        MoreResults = other.MoreResults;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MissingStatement = input.ReadBool();
            break;
          }
          case 16: {
            MoreResults = input.ReadBool();
            break;
          }
          case 26: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcMetadata : pb::IMessage<RpcMetadata> {
    private static readonly pb::MessageParser<RpcMetadata> _parser = new pb::MessageParser<RpcMetadata>(() => new RpcMetadata());
    public static pb::MessageParser<RpcMetadata> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RpcMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RpcMetadata(RpcMetadata other) : this() {
      serverAddress_ = other.serverAddress_;
    }

    public RpcMetadata Clone() {
      return new RpcMetadata(this);
    }

    public const int ServerAddressFieldNumber = 1;
    private string serverAddress_ = "";
    public string ServerAddress {
      get { return serverAddress_; }
      set {
        serverAddress_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RpcMetadata);
    }

    public bool Equals(RpcMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerAddress != other.ServerAddress) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ServerAddress.Length != 0) hash ^= ServerAddress.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerAddress);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ServerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerAddress);
      }
      return size;
    }

    public void MergeFrom(RpcMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ServerAddress.Length != 0) {
        ServerAddress = other.ServerAddress;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServerAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommitResponse : pb::IMessage<CommitResponse> {
    private static readonly pb::MessageParser<CommitResponse> _parser = new pb::MessageParser<CommitResponse>(() => new CommitResponse());
    public static pb::MessageParser<CommitResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommitResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommitResponse(CommitResponse other) : this() {
    }

    public CommitResponse Clone() {
      return new CommitResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as CommitResponse);
    }

    public bool Equals(CommitResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(CommitResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RollbackResponse : pb::IMessage<RollbackResponse> {
    private static readonly pb::MessageParser<RollbackResponse> _parser = new pb::MessageParser<RollbackResponse>(() => new RollbackResponse());
    public static pb::MessageParser<RollbackResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RollbackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RollbackResponse(RollbackResponse other) : this() {
    }

    public RollbackResponse Clone() {
      return new RollbackResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as RollbackResponse);
    }

    public bool Equals(RollbackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(RollbackResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExecuteBatchResponse : pb::IMessage<ExecuteBatchResponse> {
    private static readonly pb::MessageParser<ExecuteBatchResponse> _parser = new pb::MessageParser<ExecuteBatchResponse>(() => new ExecuteBatchResponse());
    public static pb::MessageParser<ExecuteBatchResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Responses.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ExecuteBatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ExecuteBatchResponse(ExecuteBatchResponse other) : this() {
      connectionId_ = other.connectionId_;
      statementId_ = other.statementId_;
      updateCounts_ = other.updateCounts_.Clone();
      missingStatement_ = other.missingStatement_;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    public ExecuteBatchResponse Clone() {
      return new ExecuteBatchResponse(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StatementIdFieldNumber = 2;
    private uint statementId_;
    public uint StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    public const int UpdateCountsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_updateCounts_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> updateCounts_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> UpdateCounts {
      get { return updateCounts_; }
    }

    public const int MissingStatementFieldNumber = 4;
    private bool missingStatement_;
    public bool MissingStatement {
      get { return missingStatement_; }
      set {
        missingStatement_ = value;
      }
    }

    public const int MetadataFieldNumber = 5;
    private global::Apache.Phoenix.RpcMetadata metadata_;
    public global::Apache.Phoenix.RpcMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ExecuteBatchResponse);
    }

    public bool Equals(ExecuteBatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (StatementId != other.StatementId) return false;
      if(!updateCounts_.Equals(other.updateCounts_)) return false;
      if (MissingStatement != other.MissingStatement) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      hash ^= updateCounts_.GetHashCode();
      if (MissingStatement != false) hash ^= MissingStatement.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (StatementId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatementId);
      }
      updateCounts_.WriteTo(output, _repeated_updateCounts_codec);
      if (MissingStatement != false) {
        output.WriteRawTag(32);
        output.WriteBool(MissingStatement);
      }
      if (metadata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatementId);
      }
      size += updateCounts_.CalculateSize(_repeated_updateCounts_codec);
      if (MissingStatement != false) {
        size += 1 + 1;
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(ExecuteBatchResponse other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      updateCounts_.Add(other.updateCounts_);
      if (other.MissingStatement != false) {
        MissingStatement = other.MissingStatement;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Apache.Phoenix.RpcMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            StatementId = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            updateCounts_.AddEntriesFrom(input, _repeated_updateCounts_codec);
            break;
          }
          case 32: {
            MissingStatement = input.ReadBool();
            break;
          }
          case 42: {
            if (metadata_ == null) {
              metadata_ = new global::Apache.Phoenix.RpcMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
