// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: requests.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apache.Phoenix {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Requests {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Requests() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5yZXF1ZXN0cy5wcm90bxoMY29tbW9uLnByb3RvIigKD0NhdGFsb2dzUmVx", 
            "dWVzdBIVCg1jb25uZWN0aW9uX2lkGAEgASgJIjAKF0RhdGFiYXNlUHJvcGVy", 
            "dHlSZXF1ZXN0EhUKDWNvbm5lY3Rpb25faWQYASABKAkiUAoOU2NoZW1hc1Jl", 
            "cXVlc3QSDwoHY2F0YWxvZxgBIAEoCRIWCg5zY2hlbWFfcGF0dGVybhgCIAEo", 
            "CRIVCg1jb25uZWN0aW9uX2lkGAMgASgJIpUBCg1UYWJsZXNSZXF1ZXN0Eg8K", 
            "B2NhdGFsb2cYASABKAkSFgoOc2NoZW1hX3BhdHRlcm4YAiABKAkSGgoSdGFi", 
            "bGVfbmFtZV9wYXR0ZXJuGAMgASgJEhEKCXR5cGVfbGlzdBgEIAMoCRIVCg1o", 
            "YXNfdHlwZV9saXN0GAYgASgIEhUKDWNvbm5lY3Rpb25faWQYByABKAkiKgoR", 
            "VGFibGVUeXBlc1JlcXVlc3QSFQoNY29ubmVjdGlvbl9pZBgBIAEoCSKJAQoO", 
            "Q29sdW1uc1JlcXVlc3QSDwoHY2F0YWxvZxgBIAEoCRIWCg5zY2hlbWFfcGF0", 
            "dGVybhgCIAEoCRIaChJ0YWJsZV9uYW1lX3BhdHRlcm4YAyABKAkSGwoTY29s", 
            "dW1uX25hbWVfcGF0dGVybhgEIAEoCRIVCg1jb25uZWN0aW9uX2lkGAUgASgJ", 
            "IigKD1R5cGVJbmZvUmVxdWVzdBIVCg1jb25uZWN0aW9uX2lkGAEgASgJImsK", 
            "GFByZXBhcmVBbmRFeGVjdXRlUmVxdWVzdBIVCg1jb25uZWN0aW9uX2lkGAEg", 
            "ASgJEgsKA3NxbBgCIAEoCRIVCg1tYXhfcm93X2NvdW50GAMgASgEEhQKDHN0", 
            "YXRlbWVudF9pZBgEIAEoDSJLCg5QcmVwYXJlUmVxdWVzdBIVCg1jb25uZWN0", 
            "aW9uX2lkGAEgASgJEgsKA3NxbBgCIAEoCRIVCg1tYXhfcm93X2NvdW50GAMg", 
            "ASgEImgKDEZldGNoUmVxdWVzdBIVCg1jb25uZWN0aW9uX2lkGAEgASgJEhQK", 
            "DHN0YXRlbWVudF9pZBgCIAEoDRIOCgZvZmZzZXQYAyABKAQSGwoTZmV0Y2hf", 
            "bWF4X3Jvd19jb3VudBgEIAEoDSIvChZDcmVhdGVTdGF0ZW1lbnRSZXF1ZXN0", 
            "EhUKDWNvbm5lY3Rpb25faWQYASABKAkiRAoVQ2xvc2VTdGF0ZW1lbnRSZXF1", 
            "ZXN0EhUKDWNvbm5lY3Rpb25faWQYASABKAkSFAoMc3RhdGVtZW50X2lkGAIg", 
            "ASgNIosBChVPcGVuQ29ubmVjdGlvblJlcXVlc3QSFQoNY29ubmVjdGlvbl9p", 
            "ZBgBIAEoCRIuCgRpbmZvGAIgAygLMiAuT3BlbkNvbm5lY3Rpb25SZXF1ZXN0", 
            "LkluZm9FbnRyeRorCglJbmZvRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVl", 
            "GAIgASgJOgI4ASIvChZDbG9zZUNvbm5lY3Rpb25SZXF1ZXN0EhUKDWNvbm5l", 
            "Y3Rpb25faWQYASABKAkiWQoVQ29ubmVjdGlvblN5bmNSZXF1ZXN0EhUKDWNv", 
            "bm5lY3Rpb25faWQYASABKAkSKQoKY29ubl9wcm9wcxgCIAEoCzIVLkNvbm5l", 
            "Y3Rpb25Qcm9wZXJ0aWVzIpcBCg5FeGVjdXRlUmVxdWVzdBIpCg9zdGF0ZW1l", 
            "bnRIYW5kbGUYASABKAsyEC5TdGF0ZW1lbnRIYW5kbGUSJQoQcGFyYW1ldGVy", 
            "X3ZhbHVlcxgCIAMoCzILLlR5cGVkVmFsdWUSFQoNbWF4X3Jvd19jb3VudBgD", 
            "IAEoBBIcChRoYXNfcGFyYW1ldGVyX3ZhbHVlcxgEIAEoCCJtChJTeW5jUmVz", 
            "dWx0c1JlcXVlc3QSFQoNY29ubmVjdGlvbl9pZBgBIAEoCRIUCgxzdGF0ZW1l", 
            "bnRfaWQYAiABKA0SGgoFc3RhdGUYAyABKAsyCy5RdWVyeVN0YXRlEg4KBm9m", 
            "ZnNldBgEIAEoBCImCg1Db21taXRSZXF1ZXN0EhUKDWNvbm5lY3Rpb25faWQY", 
            "ASABKAkiKAoPUm9sbGJhY2tSZXF1ZXN0EhUKDWNvbm5lY3Rpb25faWQYASAB", 
            "KAkiYgodUHJlcGFyZUFuZEV4ZWN1dGVCYXRjaFJlcXVlc3QSFQoNY29ubmVj", 
            "dGlvbl9pZBgBIAEoCRIUCgxzdGF0ZW1lbnRfaWQYAiABKA0SFAoMc3FsX2Nv", 
            "bW1hbmRzGAMgAygJIjQKC1VwZGF0ZUJhdGNoEiUKEHBhcmFtZXRlcl92YWx1", 
            "ZXMYASADKAsyCy5UeXBlZFZhbHVlImEKE0V4ZWN1dGVCYXRjaFJlcXVlc3QS", 
            "FQoNY29ubmVjdGlvbl9pZBgBIAEoCRIUCgxzdGF0ZW1lbnRfaWQYAiABKA0S", 
            "HQoHdXBkYXRlcxgDIAMoCzIMLlVwZGF0ZUJhdGNoQjMKIG9yZy5hcGFjaGUu", 
            "Y2FsY2l0ZS5hdmF0aWNhLnByb3RvqgIOQXBhY2hlLlBob2VuaXhiBnByb3Rv", 
            "Mw=="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { global::Apache.Phoenix.Common.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.CatalogsRequest), new[]{ "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.DatabasePropertyRequest), new[]{ "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.SchemasRequest), new[]{ "Catalog", "SchemaPattern", "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.TablesRequest), new[]{ "Catalog", "SchemaPattern", "TableNamePattern", "TypeList", "HasTypeList", "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.TableTypesRequest), new[]{ "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.ColumnsRequest), new[]{ "Catalog", "SchemaPattern", "TableNamePattern", "ColumnNamePattern", "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.TypeInfoRequest), new[]{ "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.PrepareAndExecuteRequest), new[]{ "ConnectionId", "Sql", "MaxRowCount", "StatementId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.PrepareRequest), new[]{ "ConnectionId", "Sql", "MaxRowCount" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.FetchRequest), new[]{ "ConnectionId", "StatementId", "Offset", "FetchMaxRowCount" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.CreateStatementRequest), new[]{ "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.CloseStatementRequest), new[]{ "ConnectionId", "StatementId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.OpenConnectionRequest), new[]{ "ConnectionId", "Info" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.CloseConnectionRequest), new[]{ "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.ConnectionSyncRequest), new[]{ "ConnectionId", "ConnProps" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.ExecuteRequest), new[]{ "StatementHandle", "ParameterValues", "MaxRowCount", "HasParameterValues" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.SyncResultsRequest), new[]{ "ConnectionId", "StatementId", "State", "Offset" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.CommitRequest), new[]{ "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.RollbackRequest), new[]{ "ConnectionId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.PrepareAndExecuteBatchRequest), new[]{ "ConnectionId", "StatementId", "SqlCommands" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.UpdateBatch), new[]{ "ParameterValues" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Apache.Phoenix.ExecuteBatchRequest), new[]{ "ConnectionId", "StatementId", "Updates" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CatalogsRequest : pb::IMessage<CatalogsRequest> {
    private static readonly pb::MessageParser<CatalogsRequest> _parser = new pb::MessageParser<CatalogsRequest>(() => new CatalogsRequest());
    public static pb::MessageParser<CatalogsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CatalogsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CatalogsRequest(CatalogsRequest other) : this() {
      connectionId_ = other.connectionId_;
    }

    public CatalogsRequest Clone() {
      return new CatalogsRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CatalogsRequest);
    }

    public bool Equals(CatalogsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(CatalogsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DatabasePropertyRequest : pb::IMessage<DatabasePropertyRequest> {
    private static readonly pb::MessageParser<DatabasePropertyRequest> _parser = new pb::MessageParser<DatabasePropertyRequest>(() => new DatabasePropertyRequest());
    public static pb::MessageParser<DatabasePropertyRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DatabasePropertyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DatabasePropertyRequest(DatabasePropertyRequest other) : this() {
      connectionId_ = other.connectionId_;
    }

    public DatabasePropertyRequest Clone() {
      return new DatabasePropertyRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DatabasePropertyRequest);
    }

    public bool Equals(DatabasePropertyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(DatabasePropertyRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SchemasRequest : pb::IMessage<SchemasRequest> {
    private static readonly pb::MessageParser<SchemasRequest> _parser = new pb::MessageParser<SchemasRequest>(() => new SchemasRequest());
    public static pb::MessageParser<SchemasRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SchemasRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SchemasRequest(SchemasRequest other) : this() {
      catalog_ = other.catalog_;
      schemaPattern_ = other.schemaPattern_;
      connectionId_ = other.connectionId_;
    }

    public SchemasRequest Clone() {
      return new SchemasRequest(this);
    }

    public const int CatalogFieldNumber = 1;
    private string catalog_ = "";
    public string Catalog {
      get { return catalog_; }
      set {
        catalog_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SchemaPatternFieldNumber = 2;
    private string schemaPattern_ = "";
    public string SchemaPattern {
      get { return schemaPattern_; }
      set {
        schemaPattern_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ConnectionIdFieldNumber = 3;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SchemasRequest);
    }

    public bool Equals(SchemasRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Catalog != other.Catalog) return false;
      if (SchemaPattern != other.SchemaPattern) return false;
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Catalog.Length != 0) hash ^= Catalog.GetHashCode();
      if (SchemaPattern.Length != 0) hash ^= SchemaPattern.GetHashCode();
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Catalog.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Catalog);
      }
      if (SchemaPattern.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SchemaPattern);
      }
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Catalog.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catalog);
      }
      if (SchemaPattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaPattern);
      }
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(SchemasRequest other) {
      if (other == null) {
        return;
      }
      if (other.Catalog.Length != 0) {
        Catalog = other.Catalog;
      }
      if (other.SchemaPattern.Length != 0) {
        SchemaPattern = other.SchemaPattern;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Catalog = input.ReadString();
            break;
          }
          case 18: {
            SchemaPattern = input.ReadString();
            break;
          }
          case 26: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TablesRequest : pb::IMessage<TablesRequest> {
    private static readonly pb::MessageParser<TablesRequest> _parser = new pb::MessageParser<TablesRequest>(() => new TablesRequest());
    public static pb::MessageParser<TablesRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TablesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TablesRequest(TablesRequest other) : this() {
      catalog_ = other.catalog_;
      schemaPattern_ = other.schemaPattern_;
      tableNamePattern_ = other.tableNamePattern_;
      typeList_ = other.typeList_.Clone();
      hasTypeList_ = other.hasTypeList_;
      connectionId_ = other.connectionId_;
    }

    public TablesRequest Clone() {
      return new TablesRequest(this);
    }

    public const int CatalogFieldNumber = 1;
    private string catalog_ = "";
    public string Catalog {
      get { return catalog_; }
      set {
        catalog_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SchemaPatternFieldNumber = 2;
    private string schemaPattern_ = "";
    public string SchemaPattern {
      get { return schemaPattern_; }
      set {
        schemaPattern_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TableNamePatternFieldNumber = 3;
    private string tableNamePattern_ = "";
    public string TableNamePattern {
      get { return tableNamePattern_; }
      set {
        tableNamePattern_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TypeListFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_typeList_codec
        = pb::FieldCodec.ForString(34);
    private pbc::RepeatedField<string> typeList_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> TypeList {
      get { return typeList_; }
      set {
        typeList_ = value;
      }
    }

    public const int HasTypeListFieldNumber = 6;
    private bool hasTypeList_;
    public bool HasTypeList {
      get { return hasTypeList_; }
      set {
        hasTypeList_ = value;
      }
    }

    public const int ConnectionIdFieldNumber = 7;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TablesRequest);
    }

    public bool Equals(TablesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Catalog != other.Catalog) return false;
      if (SchemaPattern != other.SchemaPattern) return false;
      if (TableNamePattern != other.TableNamePattern) return false;
      if(!typeList_.Equals(other.typeList_)) return false;
      if (HasTypeList != other.HasTypeList) return false;
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Catalog.Length != 0) hash ^= Catalog.GetHashCode();
      if (SchemaPattern.Length != 0) hash ^= SchemaPattern.GetHashCode();
      if (TableNamePattern.Length != 0) hash ^= TableNamePattern.GetHashCode();
      hash ^= typeList_.GetHashCode();
      if (HasTypeList != false) hash ^= HasTypeList.GetHashCode();
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Catalog.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Catalog);
      }
      if (SchemaPattern.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SchemaPattern);
      }
      if (TableNamePattern.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableNamePattern);
      }
      typeList_.WriteTo(output, _repeated_typeList_codec);
      if (HasTypeList != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasTypeList);
      }
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Catalog.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catalog);
      }
      if (SchemaPattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaPattern);
      }
      if (TableNamePattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableNamePattern);
      }
      size += typeList_.CalculateSize(_repeated_typeList_codec);
      if (HasTypeList != false) {
        size += 1 + 1;
      }
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(TablesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Catalog.Length != 0) {
        Catalog = other.Catalog;
      }
      if (other.SchemaPattern.Length != 0) {
        SchemaPattern = other.SchemaPattern;
      }
      if (other.TableNamePattern.Length != 0) {
        TableNamePattern = other.TableNamePattern;
      }
      typeList_.Add(other.typeList_);
      if (other.HasTypeList != false) {
        HasTypeList = other.HasTypeList;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Catalog = input.ReadString();
            break;
          }
          case 18: {
            SchemaPattern = input.ReadString();
            break;
          }
          case 26: {
            TableNamePattern = input.ReadString();
            break;
          }
          case 34: {
            typeList_.AddEntriesFrom(input, _repeated_typeList_codec);
            break;
          }
          case 48: {
            HasTypeList = input.ReadBool();
            break;
          }
          case 58: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableTypesRequest : pb::IMessage<TableTypesRequest> {
    private static readonly pb::MessageParser<TableTypesRequest> _parser = new pb::MessageParser<TableTypesRequest>(() => new TableTypesRequest());
    public static pb::MessageParser<TableTypesRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TableTypesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TableTypesRequest(TableTypesRequest other) : this() {
      connectionId_ = other.connectionId_;
    }

    public TableTypesRequest Clone() {
      return new TableTypesRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TableTypesRequest);
    }

    public bool Equals(TableTypesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(TableTypesRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ColumnsRequest : pb::IMessage<ColumnsRequest> {
    private static readonly pb::MessageParser<ColumnsRequest> _parser = new pb::MessageParser<ColumnsRequest>(() => new ColumnsRequest());
    public static pb::MessageParser<ColumnsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ColumnsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ColumnsRequest(ColumnsRequest other) : this() {
      catalog_ = other.catalog_;
      schemaPattern_ = other.schemaPattern_;
      tableNamePattern_ = other.tableNamePattern_;
      columnNamePattern_ = other.columnNamePattern_;
      connectionId_ = other.connectionId_;
    }

    public ColumnsRequest Clone() {
      return new ColumnsRequest(this);
    }

    public const int CatalogFieldNumber = 1;
    private string catalog_ = "";
    public string Catalog {
      get { return catalog_; }
      set {
        catalog_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SchemaPatternFieldNumber = 2;
    private string schemaPattern_ = "";
    public string SchemaPattern {
      get { return schemaPattern_; }
      set {
        schemaPattern_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TableNamePatternFieldNumber = 3;
    private string tableNamePattern_ = "";
    public string TableNamePattern {
      get { return tableNamePattern_; }
      set {
        tableNamePattern_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ColumnNamePatternFieldNumber = 4;
    private string columnNamePattern_ = "";
    public string ColumnNamePattern {
      get { return columnNamePattern_; }
      set {
        columnNamePattern_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ConnectionIdFieldNumber = 5;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ColumnsRequest);
    }

    public bool Equals(ColumnsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Catalog != other.Catalog) return false;
      if (SchemaPattern != other.SchemaPattern) return false;
      if (TableNamePattern != other.TableNamePattern) return false;
      if (ColumnNamePattern != other.ColumnNamePattern) return false;
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Catalog.Length != 0) hash ^= Catalog.GetHashCode();
      if (SchemaPattern.Length != 0) hash ^= SchemaPattern.GetHashCode();
      if (TableNamePattern.Length != 0) hash ^= TableNamePattern.GetHashCode();
      if (ColumnNamePattern.Length != 0) hash ^= ColumnNamePattern.GetHashCode();
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Catalog.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Catalog);
      }
      if (SchemaPattern.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SchemaPattern);
      }
      if (TableNamePattern.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableNamePattern);
      }
      if (ColumnNamePattern.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ColumnNamePattern);
      }
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Catalog.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catalog);
      }
      if (SchemaPattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaPattern);
      }
      if (TableNamePattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableNamePattern);
      }
      if (ColumnNamePattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnNamePattern);
      }
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(ColumnsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Catalog.Length != 0) {
        Catalog = other.Catalog;
      }
      if (other.SchemaPattern.Length != 0) {
        SchemaPattern = other.SchemaPattern;
      }
      if (other.TableNamePattern.Length != 0) {
        TableNamePattern = other.TableNamePattern;
      }
      if (other.ColumnNamePattern.Length != 0) {
        ColumnNamePattern = other.ColumnNamePattern;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Catalog = input.ReadString();
            break;
          }
          case 18: {
            SchemaPattern = input.ReadString();
            break;
          }
          case 26: {
            TableNamePattern = input.ReadString();
            break;
          }
          case 34: {
            ColumnNamePattern = input.ReadString();
            break;
          }
          case 42: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TypeInfoRequest : pb::IMessage<TypeInfoRequest> {
    private static readonly pb::MessageParser<TypeInfoRequest> _parser = new pb::MessageParser<TypeInfoRequest>(() => new TypeInfoRequest());
    public static pb::MessageParser<TypeInfoRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TypeInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TypeInfoRequest(TypeInfoRequest other) : this() {
      connectionId_ = other.connectionId_;
    }

    public TypeInfoRequest Clone() {
      return new TypeInfoRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TypeInfoRequest);
    }

    public bool Equals(TypeInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(TypeInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PrepareAndExecuteRequest : pb::IMessage<PrepareAndExecuteRequest> {
    private static readonly pb::MessageParser<PrepareAndExecuteRequest> _parser = new pb::MessageParser<PrepareAndExecuteRequest>(() => new PrepareAndExecuteRequest());
    public static pb::MessageParser<PrepareAndExecuteRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PrepareAndExecuteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PrepareAndExecuteRequest(PrepareAndExecuteRequest other) : this() {
      connectionId_ = other.connectionId_;
      sql_ = other.sql_;
      maxRowCount_ = other.maxRowCount_;
      statementId_ = other.statementId_;
    }

    public PrepareAndExecuteRequest Clone() {
      return new PrepareAndExecuteRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SqlFieldNumber = 2;
    private string sql_ = "";
    public string Sql {
      get { return sql_; }
      set {
        sql_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int MaxRowCountFieldNumber = 3;
    private ulong maxRowCount_;
    public ulong MaxRowCount {
      get { return maxRowCount_; }
      set {
        maxRowCount_ = value;
      }
    }

    public const int StatementIdFieldNumber = 4;
    private uint statementId_;
    public uint StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PrepareAndExecuteRequest);
    }

    public bool Equals(PrepareAndExecuteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (Sql != other.Sql) return false;
      if (MaxRowCount != other.MaxRowCount) return false;
      if (StatementId != other.StatementId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (Sql.Length != 0) hash ^= Sql.GetHashCode();
      if (MaxRowCount != 0UL) hash ^= MaxRowCount.GetHashCode();
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (Sql.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sql);
      }
      if (MaxRowCount != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxRowCount);
      }
      if (StatementId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(StatementId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (Sql.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sql);
      }
      if (MaxRowCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxRowCount);
      }
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatementId);
      }
      return size;
    }

    public void MergeFrom(PrepareAndExecuteRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.Sql.Length != 0) {
        Sql = other.Sql;
      }
      if (other.MaxRowCount != 0UL) {
        MaxRowCount = other.MaxRowCount;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 18: {
            Sql = input.ReadString();
            break;
          }
          case 24: {
            MaxRowCount = input.ReadUInt64();
            break;
          }
          case 32: {
            StatementId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PrepareRequest : pb::IMessage<PrepareRequest> {
    private static readonly pb::MessageParser<PrepareRequest> _parser = new pb::MessageParser<PrepareRequest>(() => new PrepareRequest());
    public static pb::MessageParser<PrepareRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PrepareRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PrepareRequest(PrepareRequest other) : this() {
      connectionId_ = other.connectionId_;
      sql_ = other.sql_;
      maxRowCount_ = other.maxRowCount_;
    }

    public PrepareRequest Clone() {
      return new PrepareRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SqlFieldNumber = 2;
    private string sql_ = "";
    public string Sql {
      get { return sql_; }
      set {
        sql_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int MaxRowCountFieldNumber = 3;
    private ulong maxRowCount_;
    public ulong MaxRowCount {
      get { return maxRowCount_; }
      set {
        maxRowCount_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PrepareRequest);
    }

    public bool Equals(PrepareRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (Sql != other.Sql) return false;
      if (MaxRowCount != other.MaxRowCount) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (Sql.Length != 0) hash ^= Sql.GetHashCode();
      if (MaxRowCount != 0UL) hash ^= MaxRowCount.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (Sql.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sql);
      }
      if (MaxRowCount != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxRowCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (Sql.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sql);
      }
      if (MaxRowCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxRowCount);
      }
      return size;
    }

    public void MergeFrom(PrepareRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.Sql.Length != 0) {
        Sql = other.Sql;
      }
      if (other.MaxRowCount != 0UL) {
        MaxRowCount = other.MaxRowCount;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 18: {
            Sql = input.ReadString();
            break;
          }
          case 24: {
            MaxRowCount = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FetchRequest : pb::IMessage<FetchRequest> {
    private static readonly pb::MessageParser<FetchRequest> _parser = new pb::MessageParser<FetchRequest>(() => new FetchRequest());
    public static pb::MessageParser<FetchRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FetchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FetchRequest(FetchRequest other) : this() {
      connectionId_ = other.connectionId_;
      statementId_ = other.statementId_;
      offset_ = other.offset_;
      fetchMaxRowCount_ = other.fetchMaxRowCount_;
    }

    public FetchRequest Clone() {
      return new FetchRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StatementIdFieldNumber = 2;
    private uint statementId_;
    public uint StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    public const int OffsetFieldNumber = 3;
    private ulong offset_;
    public ulong Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    public const int FetchMaxRowCountFieldNumber = 4;
    private uint fetchMaxRowCount_;
    public uint FetchMaxRowCount {
      get { return fetchMaxRowCount_; }
      set {
        fetchMaxRowCount_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FetchRequest);
    }

    public bool Equals(FetchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (StatementId != other.StatementId) return false;
      if (Offset != other.Offset) return false;
      if (FetchMaxRowCount != other.FetchMaxRowCount) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      if (Offset != 0UL) hash ^= Offset.GetHashCode();
      if (FetchMaxRowCount != 0) hash ^= FetchMaxRowCount.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (StatementId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatementId);
      }
      if (Offset != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Offset);
      }
      if (FetchMaxRowCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FetchMaxRowCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatementId);
      }
      if (Offset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
      }
      if (FetchMaxRowCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FetchMaxRowCount);
      }
      return size;
    }

    public void MergeFrom(FetchRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      if (other.Offset != 0UL) {
        Offset = other.Offset;
      }
      if (other.FetchMaxRowCount != 0) {
        FetchMaxRowCount = other.FetchMaxRowCount;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            StatementId = input.ReadUInt32();
            break;
          }
          case 24: {
            Offset = input.ReadUInt64();
            break;
          }
          case 32: {
            FetchMaxRowCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateStatementRequest : pb::IMessage<CreateStatementRequest> {
    private static readonly pb::MessageParser<CreateStatementRequest> _parser = new pb::MessageParser<CreateStatementRequest>(() => new CreateStatementRequest());
    public static pb::MessageParser<CreateStatementRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CreateStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CreateStatementRequest(CreateStatementRequest other) : this() {
      connectionId_ = other.connectionId_;
    }

    public CreateStatementRequest Clone() {
      return new CreateStatementRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CreateStatementRequest);
    }

    public bool Equals(CreateStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(CreateStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CloseStatementRequest : pb::IMessage<CloseStatementRequest> {
    private static readonly pb::MessageParser<CloseStatementRequest> _parser = new pb::MessageParser<CloseStatementRequest>(() => new CloseStatementRequest());
    public static pb::MessageParser<CloseStatementRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CloseStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CloseStatementRequest(CloseStatementRequest other) : this() {
      connectionId_ = other.connectionId_;
      statementId_ = other.statementId_;
    }

    public CloseStatementRequest Clone() {
      return new CloseStatementRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StatementIdFieldNumber = 2;
    private uint statementId_;
    public uint StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CloseStatementRequest);
    }

    public bool Equals(CloseStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (StatementId != other.StatementId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (StatementId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatementId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatementId);
      }
      return size;
    }

    public void MergeFrom(CloseStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            StatementId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OpenConnectionRequest : pb::IMessage<OpenConnectionRequest> {
    private static readonly pb::MessageParser<OpenConnectionRequest> _parser = new pb::MessageParser<OpenConnectionRequest>(() => new OpenConnectionRequest());
    public static pb::MessageParser<OpenConnectionRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public OpenConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public OpenConnectionRequest(OpenConnectionRequest other) : this() {
      connectionId_ = other.connectionId_;
      info_ = other.info_.Clone();
    }

    public OpenConnectionRequest Clone() {
      return new OpenConnectionRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int InfoFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_info_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> info_ = new pbc::MapField<string, string>();
    public pbc::MapField<string, string> Info {
      get { return info_; }
    }

    public override bool Equals(object other) {
      return Equals(other as OpenConnectionRequest);
    }

    public bool Equals(OpenConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (!Info.Equals(other.Info)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      hash ^= Info.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      info_.WriteTo(output, _map_info_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      size += info_.CalculateSize(_map_info_codec);
      return size;
    }

    public void MergeFrom(OpenConnectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      info_.Add(other.info_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _map_info_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CloseConnectionRequest : pb::IMessage<CloseConnectionRequest> {
    private static readonly pb::MessageParser<CloseConnectionRequest> _parser = new pb::MessageParser<CloseConnectionRequest>(() => new CloseConnectionRequest());
    public static pb::MessageParser<CloseConnectionRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CloseConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CloseConnectionRequest(CloseConnectionRequest other) : this() {
      connectionId_ = other.connectionId_;
    }

    public CloseConnectionRequest Clone() {
      return new CloseConnectionRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CloseConnectionRequest);
    }

    public bool Equals(CloseConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(CloseConnectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConnectionSyncRequest : pb::IMessage<ConnectionSyncRequest> {
    private static readonly pb::MessageParser<ConnectionSyncRequest> _parser = new pb::MessageParser<ConnectionSyncRequest>(() => new ConnectionSyncRequest());
    public static pb::MessageParser<ConnectionSyncRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ConnectionSyncRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConnectionSyncRequest(ConnectionSyncRequest other) : this() {
      connectionId_ = other.connectionId_;
      ConnProps = other.connProps_ != null ? other.ConnProps.Clone() : null;
    }

    public ConnectionSyncRequest Clone() {
      return new ConnectionSyncRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ConnPropsFieldNumber = 2;
    private global::Apache.Phoenix.ConnectionProperties connProps_;
    public global::Apache.Phoenix.ConnectionProperties ConnProps {
      get { return connProps_; }
      set {
        connProps_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConnectionSyncRequest);
    }

    public bool Equals(ConnectionSyncRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (!object.Equals(ConnProps, other.ConnProps)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (connProps_ != null) hash ^= ConnProps.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (connProps_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConnProps);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (connProps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnProps);
      }
      return size;
    }

    public void MergeFrom(ConnectionSyncRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.connProps_ != null) {
        if (connProps_ == null) {
          connProps_ = new global::Apache.Phoenix.ConnectionProperties();
        }
        ConnProps.MergeFrom(other.ConnProps);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 18: {
            if (connProps_ == null) {
              connProps_ = new global::Apache.Phoenix.ConnectionProperties();
            }
            input.ReadMessage(connProps_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExecuteRequest : pb::IMessage<ExecuteRequest> {
    private static readonly pb::MessageParser<ExecuteRequest> _parser = new pb::MessageParser<ExecuteRequest>(() => new ExecuteRequest());
    public static pb::MessageParser<ExecuteRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ExecuteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ExecuteRequest(ExecuteRequest other) : this() {
      StatementHandle = other.statementHandle_ != null ? other.StatementHandle.Clone() : null;
      parameterValues_ = other.parameterValues_.Clone();
      maxRowCount_ = other.maxRowCount_;
      hasParameterValues_ = other.hasParameterValues_;
    }

    public ExecuteRequest Clone() {
      return new ExecuteRequest(this);
    }

    public const int StatementHandleFieldNumber = 1;
    private global::Apache.Phoenix.StatementHandle statementHandle_;
    public global::Apache.Phoenix.StatementHandle StatementHandle {
      get { return statementHandle_; }
      set {
        statementHandle_ = value;
      }
    }

    public const int ParameterValuesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.TypedValue> _repeated_parameterValues_codec
        = pb::FieldCodec.ForMessage(18, global::Apache.Phoenix.TypedValue.Parser);
    private pbc::RepeatedField<global::Apache.Phoenix.TypedValue> parameterValues_ = new pbc::RepeatedField<global::Apache.Phoenix.TypedValue>();
    public pbc::RepeatedField<global::Apache.Phoenix.TypedValue> ParameterValues {
      get { return parameterValues_; }
      set {
        parameterValues_ = value;
      }
    }

    public const int MaxRowCountFieldNumber = 3;
    private ulong maxRowCount_;
    public ulong MaxRowCount {
      get { return maxRowCount_; }
      set {
        maxRowCount_ = value;
      }
    }

    public const int HasParameterValuesFieldNumber = 4;
    private bool hasParameterValues_;
    public bool HasParameterValues {
      get { return hasParameterValues_; }
      set {
        hasParameterValues_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ExecuteRequest);
    }

    public bool Equals(ExecuteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StatementHandle, other.StatementHandle)) return false;
      if(!parameterValues_.Equals(other.parameterValues_)) return false;
      if (MaxRowCount != other.MaxRowCount) return false;
      if (HasParameterValues != other.HasParameterValues) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (statementHandle_ != null) hash ^= StatementHandle.GetHashCode();
      hash ^= parameterValues_.GetHashCode();
      if (MaxRowCount != 0UL) hash ^= MaxRowCount.GetHashCode();
      if (HasParameterValues != false) hash ^= HasParameterValues.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (statementHandle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StatementHandle);
      }
      parameterValues_.WriteTo(output, _repeated_parameterValues_codec);
      if (MaxRowCount != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxRowCount);
      }
      if (HasParameterValues != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasParameterValues);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (statementHandle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatementHandle);
      }
      size += parameterValues_.CalculateSize(_repeated_parameterValues_codec);
      if (MaxRowCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxRowCount);
      }
      if (HasParameterValues != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(ExecuteRequest other) {
      if (other == null) {
        return;
      }
      if (other.statementHandle_ != null) {
        if (statementHandle_ == null) {
          statementHandle_ = new global::Apache.Phoenix.StatementHandle();
        }
        StatementHandle.MergeFrom(other.StatementHandle);
      }
      parameterValues_.Add(other.parameterValues_);
      if (other.MaxRowCount != 0UL) {
        MaxRowCount = other.MaxRowCount;
      }
      if (other.HasParameterValues != false) {
        HasParameterValues = other.HasParameterValues;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (statementHandle_ == null) {
              statementHandle_ = new global::Apache.Phoenix.StatementHandle();
            }
            input.ReadMessage(statementHandle_);
            break;
          }
          case 18: {
            parameterValues_.AddEntriesFrom(input, _repeated_parameterValues_codec);
            break;
          }
          case 24: {
            MaxRowCount = input.ReadUInt64();
            break;
          }
          case 32: {
            HasParameterValues = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SyncResultsRequest : pb::IMessage<SyncResultsRequest> {
    private static readonly pb::MessageParser<SyncResultsRequest> _parser = new pb::MessageParser<SyncResultsRequest>(() => new SyncResultsRequest());
    public static pb::MessageParser<SyncResultsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SyncResultsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SyncResultsRequest(SyncResultsRequest other) : this() {
      connectionId_ = other.connectionId_;
      statementId_ = other.statementId_;
      State = other.state_ != null ? other.State.Clone() : null;
      offset_ = other.offset_;
    }

    public SyncResultsRequest Clone() {
      return new SyncResultsRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StatementIdFieldNumber = 2;
    private uint statementId_;
    public uint StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    public const int StateFieldNumber = 3;
    private global::Apache.Phoenix.QueryState state_;
    public global::Apache.Phoenix.QueryState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public const int OffsetFieldNumber = 4;
    private ulong offset_;
    public ulong Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SyncResultsRequest);
    }

    public bool Equals(SyncResultsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (StatementId != other.StatementId) return false;
      if (!object.Equals(State, other.State)) return false;
      if (Offset != other.Offset) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (Offset != 0UL) hash ^= Offset.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (StatementId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatementId);
      }
      if (state_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(State);
      }
      if (Offset != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Offset);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatementId);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (Offset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
      }
      return size;
    }

    public void MergeFrom(SyncResultsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::Apache.Phoenix.QueryState();
        }
        State.MergeFrom(other.State);
      }
      if (other.Offset != 0UL) {
        Offset = other.Offset;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            StatementId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (state_ == null) {
              state_ = new global::Apache.Phoenix.QueryState();
            }
            input.ReadMessage(state_);
            break;
          }
          case 32: {
            Offset = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommitRequest : pb::IMessage<CommitRequest> {
    private static readonly pb::MessageParser<CommitRequest> _parser = new pb::MessageParser<CommitRequest>(() => new CommitRequest());
    public static pb::MessageParser<CommitRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommitRequest(CommitRequest other) : this() {
      connectionId_ = other.connectionId_;
    }

    public CommitRequest Clone() {
      return new CommitRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommitRequest);
    }

    public bool Equals(CommitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(CommitRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RollbackRequest : pb::IMessage<RollbackRequest> {
    private static readonly pb::MessageParser<RollbackRequest> _parser = new pb::MessageParser<RollbackRequest>(() => new RollbackRequest());
    public static pb::MessageParser<RollbackRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RollbackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RollbackRequest(RollbackRequest other) : this() {
      connectionId_ = other.connectionId_;
    }

    public RollbackRequest Clone() {
      return new RollbackRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RollbackRequest);
    }

    public bool Equals(RollbackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      return size;
    }

    public void MergeFrom(RollbackRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PrepareAndExecuteBatchRequest : pb::IMessage<PrepareAndExecuteBatchRequest> {
    private static readonly pb::MessageParser<PrepareAndExecuteBatchRequest> _parser = new pb::MessageParser<PrepareAndExecuteBatchRequest>(() => new PrepareAndExecuteBatchRequest());
    public static pb::MessageParser<PrepareAndExecuteBatchRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PrepareAndExecuteBatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PrepareAndExecuteBatchRequest(PrepareAndExecuteBatchRequest other) : this() {
      connectionId_ = other.connectionId_;
      statementId_ = other.statementId_;
      sqlCommands_ = other.sqlCommands_.Clone();
    }

    public PrepareAndExecuteBatchRequest Clone() {
      return new PrepareAndExecuteBatchRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StatementIdFieldNumber = 2;
    private uint statementId_;
    public uint StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    public const int SqlCommandsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_sqlCommands_codec
        = pb::FieldCodec.ForString(26);
    private pbc::RepeatedField<string> sqlCommands_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> SqlCommands {
      get { return sqlCommands_; }
      set {
        sqlCommands_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PrepareAndExecuteBatchRequest);
    }

    public bool Equals(PrepareAndExecuteBatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (StatementId != other.StatementId) return false;
      if(!sqlCommands_.Equals(other.sqlCommands_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      hash ^= sqlCommands_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (StatementId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatementId);
      }
      sqlCommands_.WriteTo(output, _repeated_sqlCommands_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatementId);
      }
      size += sqlCommands_.CalculateSize(_repeated_sqlCommands_codec);
      return size;
    }

    public void MergeFrom(PrepareAndExecuteBatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      sqlCommands_.Add(other.sqlCommands_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            StatementId = input.ReadUInt32();
            break;
          }
          case 26: {
            sqlCommands_.AddEntriesFrom(input, _repeated_sqlCommands_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdateBatch : pb::IMessage<UpdateBatch> {
    private static readonly pb::MessageParser<UpdateBatch> _parser = new pb::MessageParser<UpdateBatch>(() => new UpdateBatch());
    public static pb::MessageParser<UpdateBatch> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UpdateBatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UpdateBatch(UpdateBatch other) : this() {
      parameterValues_ = other.parameterValues_.Clone();
    }

    public UpdateBatch Clone() {
      return new UpdateBatch(this);
    }

    public const int ParameterValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.TypedValue> _repeated_parameterValues_codec
        = pb::FieldCodec.ForMessage(10, global::Apache.Phoenix.TypedValue.Parser);
    private pbc::RepeatedField<global::Apache.Phoenix.TypedValue> parameterValues_ = new pbc::RepeatedField<global::Apache.Phoenix.TypedValue>();
    public pbc::RepeatedField<global::Apache.Phoenix.TypedValue> ParameterValues {
      get { return parameterValues_; }
      set {
        parameterValues_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UpdateBatch);
    }

    public bool Equals(UpdateBatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!parameterValues_.Equals(other.parameterValues_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= parameterValues_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      parameterValues_.WriteTo(output, _repeated_parameterValues_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += parameterValues_.CalculateSize(_repeated_parameterValues_codec);
      return size;
    }

    public void MergeFrom(UpdateBatch other) {
      if (other == null) {
        return;
      }
      parameterValues_.Add(other.parameterValues_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            parameterValues_.AddEntriesFrom(input, _repeated_parameterValues_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExecuteBatchRequest : pb::IMessage<ExecuteBatchRequest> {
    private static readonly pb::MessageParser<ExecuteBatchRequest> _parser = new pb::MessageParser<ExecuteBatchRequest>(() => new ExecuteBatchRequest());
    public static pb::MessageParser<ExecuteBatchRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.Requests.Descriptor.MessageTypes[21]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ExecuteBatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ExecuteBatchRequest(ExecuteBatchRequest other) : this() {
      connectionId_ = other.connectionId_;
      statementId_ = other.statementId_;
      updates_ = other.updates_.Clone();
    }

    public ExecuteBatchRequest Clone() {
      return new ExecuteBatchRequest(this);
    }

    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StatementIdFieldNumber = 2;
    private uint statementId_;
    public uint StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    public const int UpdatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.UpdateBatch> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(26, global::Apache.Phoenix.UpdateBatch.Parser);
    private pbc::RepeatedField<global::Apache.Phoenix.UpdateBatch> updates_ = new pbc::RepeatedField<global::Apache.Phoenix.UpdateBatch>();
    public pbc::RepeatedField<global::Apache.Phoenix.UpdateBatch> Updates {
      get { return updates_; }
      set {
        updates_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ExecuteBatchRequest);
    }

    public bool Equals(ExecuteBatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (StatementId != other.StatementId) return false;
      if(!updates_.Equals(other.updates_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      hash ^= updates_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (StatementId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatementId);
      }
      updates_.WriteTo(output, _repeated_updates_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatementId);
      }
      size += updates_.CalculateSize(_repeated_updates_codec);
      return size;
    }

    public void MergeFrom(ExecuteBatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      updates_.Add(other.updates_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            StatementId = input.ReadUInt32();
            break;
          }
          case 26: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
