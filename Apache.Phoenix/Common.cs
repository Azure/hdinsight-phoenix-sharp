// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apache.Phoenix {

  /// <summary>Holder for reflection information generated from common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb21tb24ucHJvdG8iwAEKFENvbm5lY3Rpb25Qcm9wZXJ0aWVzEhAKCGlz",
            "X2RpcnR5GAEgASgIEhMKC2F1dG9fY29tbWl0GAIgASgIEhcKD2hhc19hdXRv",
            "X2NvbW1pdBgHIAEoCBIRCglyZWFkX29ubHkYAyABKAgSFQoNaGFzX3JlYWRf",
            "b25seRgIIAEoCBIdChV0cmFuc2FjdGlvbl9pc29sYXRpb24YBCABKA0SDwoH",
            "Y2F0YWxvZxgFIAEoCRIOCgZzY2hlbWEYBiABKAkiUwoPU3RhdGVtZW50SGFu",
            "ZGxlEhUKDWNvbm5lY3Rpb25faWQYASABKAkSCgoCaWQYAiABKA0SHQoJc2ln",
            "bmF0dXJlGAMgASgLMgouU2lnbmF0dXJlIrABCglTaWduYXR1cmUSIAoHY29s",
            "dW1ucxgBIAMoCzIPLkNvbHVtbk1ldGFEYXRhEgsKA3NxbBgCIAEoCRIlCgpw",
            "YXJhbWV0ZXJzGAMgAygLMhEuQXZhdGljYVBhcmFtZXRlchImCg5jdXJzb3Jf",
            "ZmFjdG9yeRgEIAEoCzIOLkN1cnNvckZhY3RvcnkSJQoNc3RhdGVtZW50VHlw",
            "ZRgFIAEoDjIOLlN0YXRlbWVudFR5cGUirQMKDkNvbHVtbk1ldGFEYXRhEg8K",
            "B29yZGluYWwYASABKA0SFgoOYXV0b19pbmNyZW1lbnQYAiABKAgSFgoOY2Fz",
            "ZV9zZW5zaXRpdmUYAyABKAgSEgoKc2VhcmNoYWJsZRgEIAEoCBIQCghjdXJy",
            "ZW5jeRgFIAEoCBIQCghudWxsYWJsZRgGIAEoDRIOCgZzaWduZWQYByABKAgS",
            "FAoMZGlzcGxheV9zaXplGAggASgNEg0KBWxhYmVsGAkgASgJEhMKC2NvbHVt",
            "bl9uYW1lGAogASgJEhMKC3NjaGVtYV9uYW1lGAsgASgJEhEKCXByZWNpc2lv",
            "bhgMIAEoDRINCgVzY2FsZRgNIAEoDRISCgp0YWJsZV9uYW1lGA4gASgJEhQK",
            "DGNhdGFsb2dfbmFtZRgPIAEoCRIRCglyZWFkX29ubHkYECABKAgSEAoId3Jp",
            "dGFibGUYESABKAgSGwoTZGVmaW5pdGVseV93cml0YWJsZRgSIAEoCBIZChFj",
            "b2x1bW5fY2xhc3NfbmFtZRgTIAEoCRIaCgR0eXBlGBQgASgLMgwuQXZhdGlj",
            "YVR5cGUifQoLQXZhdGljYVR5cGUSCgoCaWQYASABKA0SDAoEbmFtZRgCIAEo",
            "CRIRCgNyZXAYAyABKA4yBC5SZXASIAoHY29sdW1ucxgEIAMoCzIPLkNvbHVt",
            "bk1ldGFEYXRhEh8KCWNvbXBvbmVudBgFIAEoCzIMLkF2YXRpY2FUeXBlIpEB",
            "ChBBdmF0aWNhUGFyYW1ldGVyEg4KBnNpZ25lZBgBIAEoCBIRCglwcmVjaXNp",
            "b24YAiABKA0SDQoFc2NhbGUYAyABKA0SFgoOcGFyYW1ldGVyX3R5cGUYBCAB",
            "KA0SEQoJdHlwZV9uYW1lGAUgASgJEhIKCmNsYXNzX25hbWUYBiABKAkSDAoE",
            "bmFtZRgHIAEoCSKzAQoNQ3Vyc29yRmFjdG9yeRIjCgVzdHlsZRgBIAEoDjIU",
            "LkN1cnNvckZhY3RvcnkuU3R5bGUSEgoKY2xhc3NfbmFtZRgCIAEoCRITCgtm",
            "aWVsZF9uYW1lcxgDIAMoCSJUCgVTdHlsZRIKCgZPQkpFQ1QQABIKCgZSRUNP",
            "UkQQARIVChFSRUNPUkRfUFJPSkVDVElPThACEgkKBUFSUkFZEAMSCAoETElT",
            "VBAEEgcKA01BUBAFIjkKBUZyYW1lEg4KBm9mZnNldBgBIAEoBBIMCgRkb25l",
            "GAIgASgIEhIKBHJvd3MYAyADKAsyBC5Sb3ciIgoDUm93EhsKBXZhbHVlGAEg",
            "AygLMgwuQ29sdW1uVmFsdWUiMwoQRGF0YWJhc2VQcm9wZXJ0eRIMCgRuYW1l",
            "GAEgASgJEhEKCWZ1bmN0aW9ucxgCIAMoCSI0CgtXaXJlTWVzc2FnZRIMCgRu",
            "YW1lGAEgASgJEhcKD3dyYXBwZWRfbWVzc2FnZRgCIAEoDCKHAQoLQ29sdW1u",
            "VmFsdWUSGgoFdmFsdWUYASADKAsyCy5UeXBlZFZhbHVlEiAKC2FycmF5X3Zh",
            "bHVlGAIgAygLMgsuVHlwZWRWYWx1ZRIXCg9oYXNfYXJyYXlfdmFsdWUYAyAB",
            "KAgSIQoMc2NhbGFyX3ZhbHVlGAQgASgLMgsuVHlwZWRWYWx1ZSKZAQoKVHlw",
            "ZWRWYWx1ZRISCgR0eXBlGAEgASgOMgQuUmVwEhIKCmJvb2xfdmFsdWUYAiAB",
            "KAgSFAoMc3RyaW5nX3ZhbHVlGAMgASgJEhQKDG51bWJlcl92YWx1ZRgEIAEo",
            "EhITCgtieXRlc192YWx1ZRgFIAEoDBIUCgxkb3VibGVfdmFsdWUYBiABKAES",
            "DAoEbnVsbBgHIAEoCCKmAgoZTWV0YURhdGFPcGVyYXRpb25Bcmd1bWVudBIU",
            "CgxzdHJpbmdfdmFsdWUYASABKAkSEgoKYm9vbF92YWx1ZRgCIAEoCBIRCglp",
            "bnRfdmFsdWUYAyABKBESGwoTc3RyaW5nX2FycmF5X3ZhbHVlcxgEIAMoCRIY",
            "ChBpbnRfYXJyYXlfdmFsdWVzGAUgAygREjUKBHR5cGUYBiABKA4yJy5NZXRh",
            "RGF0YU9wZXJhdGlvbkFyZ3VtZW50LkFyZ3VtZW50VHlwZSJeCgxBcmd1bWVu",
            "dFR5cGUSCgoGU1RSSU5HEAASCAoEQk9PTBABEgcKA0lOVBACEhMKD1JFUEVB",
            "VEVEX1NUUklORxADEhAKDFJFUEVBVEVEX0lOVBAEEggKBE5VTEwQBSKwAQoK",
            "UXVlcnlTdGF0ZRIYCgR0eXBlGAEgASgOMgouU3RhdGVUeXBlEgsKA3NxbBgC",
            "IAEoCRIeCgJvcBgDIAEoDjISLk1ldGFEYXRhT3BlcmF0aW9uEigKBGFyZ3MY",
            "BCADKAsyGi5NZXRhRGF0YU9wZXJhdGlvbkFyZ3VtZW50EhAKCGhhc19hcmdz",
            "GAUgASgIEg8KB2hhc19zcWwYBiABKAgSDgoGaGFzX29wGAcgASgIKp8BCg1T",
            "dGF0ZW1lbnRUeXBlEgoKBlNFTEVDVBAAEgoKBklOU0VSVBABEgoKBlVQREFU",
            "RRACEgoKBkRFTEVURRADEgoKBlVQU0VSVBAEEgkKBU1FUkdFEAUSDQoJT1RI",
            "RVJfRE1MEAYSCgoGQ1JFQVRFEAcSCAoERFJPUBAIEgkKBUFMVEVSEAkSDQoJ",
            "T1RIRVJfRERMEAoSCAoEQ0FMTBALKuIDCgNSZXASFQoRUFJJTUlUSVZFX0JP",
            "T0xFQU4QABISCg5QUklNSVRJVkVfQllURRABEhIKDlBSSU1JVElWRV9DSEFS",
            "EAISEwoPUFJJTUlUSVZFX1NIT1JUEAMSEQoNUFJJTUlUSVZFX0lOVBAEEhIK",
            "DlBSSU1JVElWRV9MT05HEAUSEwoPUFJJTUlUSVZFX0ZMT0FUEAYSFAoQUFJJ",
            "TUlUSVZFX0RPVUJMRRAHEgsKB0JPT0xFQU4QCBIICgRCWVRFEAkSDQoJQ0hB",
            "UkFDVEVSEAoSCQoFU0hPUlQQCxILCgdJTlRFR0VSEAwSCAoETE9ORxANEgkK",
            "BUZMT0FUEA4SCgoGRE9VQkxFEA8SDwoLQklHX0lOVEVHRVIQGRIPCgtCSUdf",
            "REVDSU1BTBAaEhEKDUpBVkFfU1FMX1RJTUUQEBIWChJKQVZBX1NRTF9USU1F",
            "U1RBTVAQERIRCg1KQVZBX1NRTF9EQVRFEBISEgoOSkFWQV9VVElMX0RBVEUQ",
            "ExIPCgtCWVRFX1NUUklORxAUEgoKBlNUUklORxAVEgoKBk5VTUJFUhAWEgoK",
            "Bk9CSkVDVBAXEggKBE5VTEwQGBIJCgVBUlJBWRAbEgoKBlNUUlVDVBAcEgwK",
            "CE1VTFRJU0VUEB0qXgoIU2V2ZXJpdHkSFAoQVU5LTk9XTl9TRVZFUklUWRAA",
            "EhIKDkZBVEFMX1NFVkVSSVRZEAESEgoORVJST1JfU0VWRVJJVFkQAhIUChBX",
            "QVJOSU5HX1NFVkVSSVRZEAMq1wQKEU1ldGFEYXRhT3BlcmF0aW9uEhIKDkdF",
            "VF9BVFRSSUJVVEVTEAASGwoXR0VUX0JFU1RfUk9XX0lERU5USUZJRVIQARIQ",
            "CgxHRVRfQ0FUQUxPR1MQAhIeChpHRVRfQ0xJRU5UX0lORk9fUFJPUEVSVElF",
            "UxADEhkKFUdFVF9DT0xVTU5fUFJJVklMRUdFUxAEEg8KC0dFVF9DT0xVTU5T",
            "EAUSFwoTR0VUX0NST1NTX1JFRkVSRU5DRRAGEhUKEUdFVF9FWFBPUlRFRF9L",
            "RVlTEAcSGAoUR0VUX0ZVTkNUSU9OX0NPTFVNTlMQCBIRCg1HRVRfRlVOQ1RJ",
            "T05TEAkSFQoRR0VUX0lNUE9SVEVEX0tFWVMQChISCg5HRVRfSU5ERVhfSU5G",
            "TxALEhQKEEdFVF9QUklNQVJZX0tFWVMQDBIZChVHRVRfUFJPQ0VEVVJFX0NP",
            "TFVNTlMQDRISCg5HRVRfUFJPQ0VEVVJFUxAOEhYKEkdFVF9QU0VVRE9fQ09M",
            "VU1OUxAPEg8KC0dFVF9TQ0hFTUFTEBASGQoVR0VUX1NDSEVNQVNfV0lUSF9B",
            "UkdTEBESFAoQR0VUX1NVUEVSX1RBQkxFUxASEhMKD0dFVF9TVVBFUl9UWVBF",
            "UxATEhgKFEdFVF9UQUJMRV9QUklWSUxFR0VTEBQSDgoKR0VUX1RBQkxFUxAV",
            "EhMKD0dFVF9UQUJMRV9UWVBFUxAWEhEKDUdFVF9UWVBFX0lORk8QFxIMCghH",
            "RVRfVURUUxAYEhcKE0dFVF9WRVJTSU9OX0NPTFVNTlMQGSoiCglTdGF0ZVR5",
            "cGUSBwoDU1FMEAASDAoITUVUQURBVEEQAUIRqgIOQXBhY2hlLlBob2VuaXhi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apache.Phoenix.StatementType), typeof(global::Apache.Phoenix.Rep), typeof(global::Apache.Phoenix.Severity), typeof(global::Apache.Phoenix.MetaDataOperation), typeof(global::Apache.Phoenix.StateType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.ConnectionProperties), global::Apache.Phoenix.ConnectionProperties.Parser, new[]{ "IsDirty", "AutoCommit", "HasAutoCommit", "ReadOnly", "HasReadOnly", "TransactionIsolation", "Catalog", "Schema" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.StatementHandle), global::Apache.Phoenix.StatementHandle.Parser, new[]{ "ConnectionId", "Id", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.Signature), global::Apache.Phoenix.Signature.Parser, new[]{ "Columns", "Sql", "Parameters", "CursorFactory", "StatementType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.ColumnMetaData), global::Apache.Phoenix.ColumnMetaData.Parser, new[]{ "Ordinal", "AutoIncrement", "CaseSensitive", "Searchable", "Currency", "Nullable", "Signed", "DisplaySize", "Label", "ColumnName", "SchemaName", "Precision", "Scale", "TableName", "CatalogName", "ReadOnly", "Writable", "DefinitelyWritable", "ColumnClassName", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.AvaticaType), global::Apache.Phoenix.AvaticaType.Parser, new[]{ "Id", "Name", "Rep", "Columns", "Component" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.AvaticaParameter), global::Apache.Phoenix.AvaticaParameter.Parser, new[]{ "Signed", "Precision", "Scale", "ParameterType", "TypeName", "ClassName", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.CursorFactory), global::Apache.Phoenix.CursorFactory.Parser, new[]{ "Style", "ClassName", "FieldNames" }, null, new[]{ typeof(global::Apache.Phoenix.CursorFactory.Types.Style) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.Frame), global::Apache.Phoenix.Frame.Parser, new[]{ "Offset", "Done", "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.Row), global::Apache.Phoenix.Row.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.DatabaseProperty), global::Apache.Phoenix.DatabaseProperty.Parser, new[]{ "Name", "Functions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.WireMessage), global::Apache.Phoenix.WireMessage.Parser, new[]{ "Name", "WrappedMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.ColumnValue), global::Apache.Phoenix.ColumnValue.Parser, new[]{ "Value", "ArrayValue", "HasArrayValue", "ScalarValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.TypedValue), global::Apache.Phoenix.TypedValue.Parser, new[]{ "Type", "BoolValue", "StringValue", "NumberValue", "BytesValue", "DoubleValue", "Null" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.MetaDataOperationArgument), global::Apache.Phoenix.MetaDataOperationArgument.Parser, new[]{ "StringValue", "BoolValue", "IntValue", "StringArrayValues", "IntArrayValues", "Type" }, null, new[]{ typeof(global::Apache.Phoenix.MetaDataOperationArgument.Types.ArgumentType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apache.Phoenix.QueryState), global::Apache.Phoenix.QueryState.Parser, new[]{ "Type", "Sql", "Op", "Args", "HasArgs", "HasSql", "HasOp" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Has to be consistent with Meta.StatementType
  /// </summary>
  public enum StatementType {
    [pbr::OriginalName("SELECT")] Select = 0,
    [pbr::OriginalName("INSERT")] Insert = 1,
    [pbr::OriginalName("UPDATE")] Update = 2,
    [pbr::OriginalName("DELETE")] Delete = 3,
    [pbr::OriginalName("UPSERT")] Upsert = 4,
    [pbr::OriginalName("MERGE")] Merge = 5,
    [pbr::OriginalName("OTHER_DML")] OtherDml = 6,
    [pbr::OriginalName("CREATE")] Create = 7,
    [pbr::OriginalName("DROP")] Drop = 8,
    [pbr::OriginalName("ALTER")] Alter = 9,
    [pbr::OriginalName("OTHER_DDL")] OtherDdl = 10,
    [pbr::OriginalName("CALL")] Call = 11,
  }

  public enum Rep {
    [pbr::OriginalName("PRIMITIVE_BOOLEAN")] PrimitiveBoolean = 0,
    [pbr::OriginalName("PRIMITIVE_BYTE")] PrimitiveByte = 1,
    [pbr::OriginalName("PRIMITIVE_CHAR")] PrimitiveChar = 2,
    [pbr::OriginalName("PRIMITIVE_SHORT")] PrimitiveShort = 3,
    [pbr::OriginalName("PRIMITIVE_INT")] PrimitiveInt = 4,
    [pbr::OriginalName("PRIMITIVE_LONG")] PrimitiveLong = 5,
    [pbr::OriginalName("PRIMITIVE_FLOAT")] PrimitiveFloat = 6,
    [pbr::OriginalName("PRIMITIVE_DOUBLE")] PrimitiveDouble = 7,
    [pbr::OriginalName("BOOLEAN")] Boolean = 8,
    [pbr::OriginalName("BYTE")] Byte = 9,
    [pbr::OriginalName("CHARACTER")] Character = 10,
    [pbr::OriginalName("SHORT")] Short = 11,
    [pbr::OriginalName("INTEGER")] Integer = 12,
    [pbr::OriginalName("LONG")] Long = 13,
    [pbr::OriginalName("FLOAT")] Float = 14,
    [pbr::OriginalName("DOUBLE")] Double = 15,
    [pbr::OriginalName("BIG_INTEGER")] BigInteger = 25,
    [pbr::OriginalName("BIG_DECIMAL")] BigDecimal = 26,
    [pbr::OriginalName("JAVA_SQL_TIME")] JavaSqlTime = 16,
    [pbr::OriginalName("JAVA_SQL_TIMESTAMP")] JavaSqlTimestamp = 17,
    [pbr::OriginalName("JAVA_SQL_DATE")] JavaSqlDate = 18,
    [pbr::OriginalName("JAVA_UTIL_DATE")] JavaUtilDate = 19,
    [pbr::OriginalName("BYTE_STRING")] ByteString = 20,
    [pbr::OriginalName("STRING")] String = 21,
    [pbr::OriginalName("NUMBER")] Number = 22,
    [pbr::OriginalName("OBJECT")] Object = 23,
    [pbr::OriginalName("NULL")] Null = 24,
    [pbr::OriginalName("ARRAY")] Array = 27,
    [pbr::OriginalName("STRUCT")] Struct = 28,
    [pbr::OriginalName("MULTISET")] Multiset = 29,
  }

  /// <summary>
  ///  The severity of some unexpected outcome to an operation.
  ///  Protobuf enum values must be unique across all other enums
  /// </summary>
  public enum Severity {
    [pbr::OriginalName("UNKNOWN_SEVERITY")] UnknownSeverity = 0,
    [pbr::OriginalName("FATAL_SEVERITY")] FatalSeverity = 1,
    [pbr::OriginalName("ERROR_SEVERITY")] ErrorSeverity = 2,
    [pbr::OriginalName("WARNING_SEVERITY")] WarningSeverity = 3,
  }

  /// <summary>
  ///  Enumeration corresponding to DatabaseMetaData operations
  /// </summary>
  public enum MetaDataOperation {
    [pbr::OriginalName("GET_ATTRIBUTES")] GetAttributes = 0,
    [pbr::OriginalName("GET_BEST_ROW_IDENTIFIER")] GetBestRowIdentifier = 1,
    [pbr::OriginalName("GET_CATALOGS")] GetCatalogs = 2,
    [pbr::OriginalName("GET_CLIENT_INFO_PROPERTIES")] GetClientInfoProperties = 3,
    [pbr::OriginalName("GET_COLUMN_PRIVILEGES")] GetColumnPrivileges = 4,
    [pbr::OriginalName("GET_COLUMNS")] GetColumns = 5,
    [pbr::OriginalName("GET_CROSS_REFERENCE")] GetCrossReference = 6,
    [pbr::OriginalName("GET_EXPORTED_KEYS")] GetExportedKeys = 7,
    [pbr::OriginalName("GET_FUNCTION_COLUMNS")] GetFunctionColumns = 8,
    [pbr::OriginalName("GET_FUNCTIONS")] GetFunctions = 9,
    [pbr::OriginalName("GET_IMPORTED_KEYS")] GetImportedKeys = 10,
    [pbr::OriginalName("GET_INDEX_INFO")] GetIndexInfo = 11,
    [pbr::OriginalName("GET_PRIMARY_KEYS")] GetPrimaryKeys = 12,
    [pbr::OriginalName("GET_PROCEDURE_COLUMNS")] GetProcedureColumns = 13,
    [pbr::OriginalName("GET_PROCEDURES")] GetProcedures = 14,
    [pbr::OriginalName("GET_PSEUDO_COLUMNS")] GetPseudoColumns = 15,
    [pbr::OriginalName("GET_SCHEMAS")] GetSchemas = 16,
    [pbr::OriginalName("GET_SCHEMAS_WITH_ARGS")] GetSchemasWithArgs = 17,
    [pbr::OriginalName("GET_SUPER_TABLES")] GetSuperTables = 18,
    [pbr::OriginalName("GET_SUPER_TYPES")] GetSuperTypes = 19,
    [pbr::OriginalName("GET_TABLE_PRIVILEGES")] GetTablePrivileges = 20,
    [pbr::OriginalName("GET_TABLES")] GetTables = 21,
    [pbr::OriginalName("GET_TABLE_TYPES")] GetTableTypes = 22,
    [pbr::OriginalName("GET_TYPE_INFO")] GetTypeInfo = 23,
    [pbr::OriginalName("GET_UDTS")] GetUdts = 24,
    [pbr::OriginalName("GET_VERSION_COLUMNS")] GetVersionColumns = 25,
  }

  public enum StateType {
    [pbr::OriginalName("SQL")] Sql = 0,
    [pbr::OriginalName("METADATA")] Metadata = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  Details about a connection
  /// </summary>
  public sealed partial class ConnectionProperties : pb::IMessage<ConnectionProperties> {
    private static readonly pb::MessageParser<ConnectionProperties> _parser = new pb::MessageParser<ConnectionProperties>(() => new ConnectionProperties());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionProperties(ConnectionProperties other) : this() {
      isDirty_ = other.isDirty_;
      autoCommit_ = other.autoCommit_;
      hasAutoCommit_ = other.hasAutoCommit_;
      readOnly_ = other.readOnly_;
      hasReadOnly_ = other.hasReadOnly_;
      transactionIsolation_ = other.transactionIsolation_;
      catalog_ = other.catalog_;
      schema_ = other.schema_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionProperties Clone() {
      return new ConnectionProperties(this);
    }

    /// <summary>Field number for the "is_dirty" field.</summary>
    public const int IsDirtyFieldNumber = 1;
    private bool isDirty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDirty {
      get { return isDirty_; }
      set {
        isDirty_ = value;
      }
    }

    /// <summary>Field number for the "auto_commit" field.</summary>
    public const int AutoCommitFieldNumber = 2;
    private bool autoCommit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoCommit {
      get { return autoCommit_; }
      set {
        autoCommit_ = value;
      }
    }

    /// <summary>Field number for the "has_auto_commit" field.</summary>
    public const int HasAutoCommitFieldNumber = 7;
    private bool hasAutoCommit_;
    /// <summary>
    ///  field is a Boolean, need to discern null and default value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAutoCommit {
      get { return hasAutoCommit_; }
      set {
        hasAutoCommit_ = value;
      }
    }

    /// <summary>Field number for the "read_only" field.</summary>
    public const int ReadOnlyFieldNumber = 3;
    private bool readOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReadOnly {
      get { return readOnly_; }
      set {
        readOnly_ = value;
      }
    }

    /// <summary>Field number for the "has_read_only" field.</summary>
    public const int HasReadOnlyFieldNumber = 8;
    private bool hasReadOnly_;
    /// <summary>
    ///  field is a Boolean, need to discern null and default value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReadOnly {
      get { return hasReadOnly_; }
      set {
        hasReadOnly_ = value;
      }
    }

    /// <summary>Field number for the "transaction_isolation" field.</summary>
    public const int TransactionIsolationFieldNumber = 4;
    private uint transactionIsolation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TransactionIsolation {
      get { return transactionIsolation_; }
      set {
        transactionIsolation_ = value;
      }
    }

    /// <summary>Field number for the "catalog" field.</summary>
    public const int CatalogFieldNumber = 5;
    private string catalog_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Catalog {
      get { return catalog_; }
      set {
        catalog_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 6;
    private string schema_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schema {
      get { return schema_; }
      set {
        schema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsDirty != other.IsDirty) return false;
      if (AutoCommit != other.AutoCommit) return false;
      if (HasAutoCommit != other.HasAutoCommit) return false;
      if (ReadOnly != other.ReadOnly) return false;
      if (HasReadOnly != other.HasReadOnly) return false;
      if (TransactionIsolation != other.TransactionIsolation) return false;
      if (Catalog != other.Catalog) return false;
      if (Schema != other.Schema) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsDirty != false) hash ^= IsDirty.GetHashCode();
      if (AutoCommit != false) hash ^= AutoCommit.GetHashCode();
      if (HasAutoCommit != false) hash ^= HasAutoCommit.GetHashCode();
      if (ReadOnly != false) hash ^= ReadOnly.GetHashCode();
      if (HasReadOnly != false) hash ^= HasReadOnly.GetHashCode();
      if (TransactionIsolation != 0) hash ^= TransactionIsolation.GetHashCode();
      if (Catalog.Length != 0) hash ^= Catalog.GetHashCode();
      if (Schema.Length != 0) hash ^= Schema.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsDirty != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsDirty);
      }
      if (AutoCommit != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoCommit);
      }
      if (ReadOnly != false) {
        output.WriteRawTag(24);
        output.WriteBool(ReadOnly);
      }
      if (TransactionIsolation != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TransactionIsolation);
      }
      if (Catalog.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Catalog);
      }
      if (Schema.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Schema);
      }
      if (HasAutoCommit != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasAutoCommit);
      }
      if (HasReadOnly != false) {
        output.WriteRawTag(64);
        output.WriteBool(HasReadOnly);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsDirty != false) {
        size += 1 + 1;
      }
      if (AutoCommit != false) {
        size += 1 + 1;
      }
      if (HasAutoCommit != false) {
        size += 1 + 1;
      }
      if (ReadOnly != false) {
        size += 1 + 1;
      }
      if (HasReadOnly != false) {
        size += 1 + 1;
      }
      if (TransactionIsolation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TransactionIsolation);
      }
      if (Catalog.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catalog);
      }
      if (Schema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionProperties other) {
      if (other == null) {
        return;
      }
      if (other.IsDirty != false) {
        IsDirty = other.IsDirty;
      }
      if (other.AutoCommit != false) {
        AutoCommit = other.AutoCommit;
      }
      if (other.HasAutoCommit != false) {
        HasAutoCommit = other.HasAutoCommit;
      }
      if (other.ReadOnly != false) {
        ReadOnly = other.ReadOnly;
      }
      if (other.HasReadOnly != false) {
        HasReadOnly = other.HasReadOnly;
      }
      if (other.TransactionIsolation != 0) {
        TransactionIsolation = other.TransactionIsolation;
      }
      if (other.Catalog.Length != 0) {
        Catalog = other.Catalog;
      }
      if (other.Schema.Length != 0) {
        Schema = other.Schema;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsDirty = input.ReadBool();
            break;
          }
          case 16: {
            AutoCommit = input.ReadBool();
            break;
          }
          case 24: {
            ReadOnly = input.ReadBool();
            break;
          }
          case 32: {
            TransactionIsolation = input.ReadUInt32();
            break;
          }
          case 42: {
            Catalog = input.ReadString();
            break;
          }
          case 50: {
            Schema = input.ReadString();
            break;
          }
          case 56: {
            HasAutoCommit = input.ReadBool();
            break;
          }
          case 64: {
            HasReadOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Statement handle
  /// </summary>
  public sealed partial class StatementHandle : pb::IMessage<StatementHandle> {
    private static readonly pb::MessageParser<StatementHandle> _parser = new pb::MessageParser<StatementHandle>(() => new StatementHandle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatementHandle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatementHandle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatementHandle(StatementHandle other) : this() {
      connectionId_ = other.connectionId_;
      id_ = other.id_;
      Signature = other.signature_ != null ? other.Signature.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatementHandle Clone() {
      return new StatementHandle(this);
    }

    /// <summary>Field number for the "connection_id" field.</summary>
    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 3;
    private global::Apache.Phoenix.Signature signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.Signature Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatementHandle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatementHandle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (signature_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatementHandle other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          signature_ = new global::Apache.Phoenix.Signature();
        }
        Signature.MergeFrom(other.Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 26: {
            if (signature_ == null) {
              signature_ = new global::Apache.Phoenix.Signature();
            }
            input.ReadMessage(signature_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Results of preparing a statement
  /// </summary>
  public sealed partial class Signature : pb::IMessage<Signature> {
    private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Signature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature(Signature other) : this() {
      columns_ = other.columns_.Clone();
      sql_ = other.sql_;
      parameters_ = other.parameters_.Clone();
      CursorFactory = other.cursorFactory_ != null ? other.CursorFactory.Clone() : null;
      statementType_ = other.statementType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature Clone() {
      return new Signature(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.ColumnMetaData> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(10, global::Apache.Phoenix.ColumnMetaData.Parser);
    private readonly pbc::RepeatedField<global::Apache.Phoenix.ColumnMetaData> columns_ = new pbc::RepeatedField<global::Apache.Phoenix.ColumnMetaData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apache.Phoenix.ColumnMetaData> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "sql" field.</summary>
    public const int SqlFieldNumber = 2;
    private string sql_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sql {
      get { return sql_; }
      set {
        sql_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.AvaticaParameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(26, global::Apache.Phoenix.AvaticaParameter.Parser);
    private readonly pbc::RepeatedField<global::Apache.Phoenix.AvaticaParameter> parameters_ = new pbc::RepeatedField<global::Apache.Phoenix.AvaticaParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apache.Phoenix.AvaticaParameter> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "cursor_factory" field.</summary>
    public const int CursorFactoryFieldNumber = 4;
    private global::Apache.Phoenix.CursorFactory cursorFactory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.CursorFactory CursorFactory {
      get { return cursorFactory_; }
      set {
        cursorFactory_ = value;
      }
    }

    /// <summary>Field number for the "statementType" field.</summary>
    public const int StatementTypeFieldNumber = 5;
    private global::Apache.Phoenix.StatementType statementType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.StatementType StatementType {
      get { return statementType_; }
      set {
        statementType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Signature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Signature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if (Sql != other.Sql) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      if (!object.Equals(CursorFactory, other.CursorFactory)) return false;
      if (StatementType != other.StatementType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      if (Sql.Length != 0) hash ^= Sql.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (cursorFactory_ != null) hash ^= CursorFactory.GetHashCode();
      if (StatementType != 0) hash ^= StatementType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      columns_.WriteTo(output, _repeated_columns_codec);
      if (Sql.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sql);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (cursorFactory_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CursorFactory);
      }
      if (StatementType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) StatementType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (Sql.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sql);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (cursorFactory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CursorFactory);
      }
      if (StatementType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatementType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Signature other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      if (other.Sql.Length != 0) {
        Sql = other.Sql;
      }
      parameters_.Add(other.parameters_);
      if (other.cursorFactory_ != null) {
        if (cursorFactory_ == null) {
          cursorFactory_ = new global::Apache.Phoenix.CursorFactory();
        }
        CursorFactory.MergeFrom(other.CursorFactory);
      }
      if (other.StatementType != 0) {
        StatementType = other.StatementType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Sql = input.ReadString();
            break;
          }
          case 26: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 34: {
            if (cursorFactory_ == null) {
              cursorFactory_ = new global::Apache.Phoenix.CursorFactory();
            }
            input.ReadMessage(cursorFactory_);
            break;
          }
          case 40: {
            statementType_ = (global::Apache.Phoenix.StatementType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColumnMetaData : pb::IMessage<ColumnMetaData> {
    private static readonly pb::MessageParser<ColumnMetaData> _parser = new pb::MessageParser<ColumnMetaData>(() => new ColumnMetaData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnMetaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnMetaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnMetaData(ColumnMetaData other) : this() {
      ordinal_ = other.ordinal_;
      autoIncrement_ = other.autoIncrement_;
      caseSensitive_ = other.caseSensitive_;
      searchable_ = other.searchable_;
      currency_ = other.currency_;
      nullable_ = other.nullable_;
      signed_ = other.signed_;
      displaySize_ = other.displaySize_;
      label_ = other.label_;
      columnName_ = other.columnName_;
      schemaName_ = other.schemaName_;
      precision_ = other.precision_;
      scale_ = other.scale_;
      tableName_ = other.tableName_;
      catalogName_ = other.catalogName_;
      readOnly_ = other.readOnly_;
      writable_ = other.writable_;
      definitelyWritable_ = other.definitelyWritable_;
      columnClassName_ = other.columnClassName_;
      Type = other.type_ != null ? other.Type.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnMetaData Clone() {
      return new ColumnMetaData(this);
    }

    /// <summary>Field number for the "ordinal" field.</summary>
    public const int OrdinalFieldNumber = 1;
    private uint ordinal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ordinal {
      get { return ordinal_; }
      set {
        ordinal_ = value;
      }
    }

    /// <summary>Field number for the "auto_increment" field.</summary>
    public const int AutoIncrementFieldNumber = 2;
    private bool autoIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoIncrement {
      get { return autoIncrement_; }
      set {
        autoIncrement_ = value;
      }
    }

    /// <summary>Field number for the "case_sensitive" field.</summary>
    public const int CaseSensitiveFieldNumber = 3;
    private bool caseSensitive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CaseSensitive {
      get { return caseSensitive_; }
      set {
        caseSensitive_ = value;
      }
    }

    /// <summary>Field number for the "searchable" field.</summary>
    public const int SearchableFieldNumber = 4;
    private bool searchable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Searchable {
      get { return searchable_; }
      set {
        searchable_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 5;
    private bool currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Currency {
      get { return currency_; }
      set {
        currency_ = value;
      }
    }

    /// <summary>Field number for the "nullable" field.</summary>
    public const int NullableFieldNumber = 6;
    private uint nullable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nullable {
      get { return nullable_; }
      set {
        nullable_ = value;
      }
    }

    /// <summary>Field number for the "signed" field.</summary>
    public const int SignedFieldNumber = 7;
    private bool signed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Signed {
      get { return signed_; }
      set {
        signed_ = value;
      }
    }

    /// <summary>Field number for the "display_size" field.</summary>
    public const int DisplaySizeFieldNumber = 8;
    private uint displaySize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DisplaySize {
      get { return displaySize_; }
      set {
        displaySize_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 9;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_name" field.</summary>
    public const int ColumnNameFieldNumber = 10;
    private string columnName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schema_name" field.</summary>
    public const int SchemaNameFieldNumber = 11;
    private string schemaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaName {
      get { return schemaName_; }
      set {
        schemaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 12;
    private uint precision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 13;
    private uint scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 14;
    private string tableName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "catalog_name" field.</summary>
    public const int CatalogNameFieldNumber = 15;
    private string catalogName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CatalogName {
      get { return catalogName_; }
      set {
        catalogName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read_only" field.</summary>
    public const int ReadOnlyFieldNumber = 16;
    private bool readOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReadOnly {
      get { return readOnly_; }
      set {
        readOnly_ = value;
      }
    }

    /// <summary>Field number for the "writable" field.</summary>
    public const int WritableFieldNumber = 17;
    private bool writable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Writable {
      get { return writable_; }
      set {
        writable_ = value;
      }
    }

    /// <summary>Field number for the "definitely_writable" field.</summary>
    public const int DefinitelyWritableFieldNumber = 18;
    private bool definitelyWritable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DefinitelyWritable {
      get { return definitelyWritable_; }
      set {
        definitelyWritable_ = value;
      }
    }

    /// <summary>Field number for the "column_class_name" field.</summary>
    public const int ColumnClassNameFieldNumber = 19;
    private string columnClassName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnClassName {
      get { return columnClassName_; }
      set {
        columnClassName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 20;
    private global::Apache.Phoenix.AvaticaType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.AvaticaType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnMetaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnMetaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ordinal != other.Ordinal) return false;
      if (AutoIncrement != other.AutoIncrement) return false;
      if (CaseSensitive != other.CaseSensitive) return false;
      if (Searchable != other.Searchable) return false;
      if (Currency != other.Currency) return false;
      if (Nullable != other.Nullable) return false;
      if (Signed != other.Signed) return false;
      if (DisplaySize != other.DisplaySize) return false;
      if (Label != other.Label) return false;
      if (ColumnName != other.ColumnName) return false;
      if (SchemaName != other.SchemaName) return false;
      if (Precision != other.Precision) return false;
      if (Scale != other.Scale) return false;
      if (TableName != other.TableName) return false;
      if (CatalogName != other.CatalogName) return false;
      if (ReadOnly != other.ReadOnly) return false;
      if (Writable != other.Writable) return false;
      if (DefinitelyWritable != other.DefinitelyWritable) return false;
      if (ColumnClassName != other.ColumnClassName) return false;
      if (!object.Equals(Type, other.Type)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ordinal != 0) hash ^= Ordinal.GetHashCode();
      if (AutoIncrement != false) hash ^= AutoIncrement.GetHashCode();
      if (CaseSensitive != false) hash ^= CaseSensitive.GetHashCode();
      if (Searchable != false) hash ^= Searchable.GetHashCode();
      if (Currency != false) hash ^= Currency.GetHashCode();
      if (Nullable != 0) hash ^= Nullable.GetHashCode();
      if (Signed != false) hash ^= Signed.GetHashCode();
      if (DisplaySize != 0) hash ^= DisplaySize.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      if (SchemaName.Length != 0) hash ^= SchemaName.GetHashCode();
      if (Precision != 0) hash ^= Precision.GetHashCode();
      if (Scale != 0) hash ^= Scale.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (CatalogName.Length != 0) hash ^= CatalogName.GetHashCode();
      if (ReadOnly != false) hash ^= ReadOnly.GetHashCode();
      if (Writable != false) hash ^= Writable.GetHashCode();
      if (DefinitelyWritable != false) hash ^= DefinitelyWritable.GetHashCode();
      if (ColumnClassName.Length != 0) hash ^= ColumnClassName.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ordinal != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ordinal);
      }
      if (AutoIncrement != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoIncrement);
      }
      if (CaseSensitive != false) {
        output.WriteRawTag(24);
        output.WriteBool(CaseSensitive);
      }
      if (Searchable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Searchable);
      }
      if (Currency != false) {
        output.WriteRawTag(40);
        output.WriteBool(Currency);
      }
      if (Nullable != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Nullable);
      }
      if (Signed != false) {
        output.WriteRawTag(56);
        output.WriteBool(Signed);
      }
      if (DisplaySize != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(DisplaySize);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Label);
      }
      if (ColumnName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ColumnName);
      }
      if (SchemaName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SchemaName);
      }
      if (Precision != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Precision);
      }
      if (Scale != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Scale);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(TableName);
      }
      if (CatalogName.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(CatalogName);
      }
      if (ReadOnly != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(ReadOnly);
      }
      if (Writable != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Writable);
      }
      if (DefinitelyWritable != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(DefinitelyWritable);
      }
      if (ColumnClassName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ColumnClassName);
      }
      if (type_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ordinal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ordinal);
      }
      if (AutoIncrement != false) {
        size += 1 + 1;
      }
      if (CaseSensitive != false) {
        size += 1 + 1;
      }
      if (Searchable != false) {
        size += 1 + 1;
      }
      if (Currency != false) {
        size += 1 + 1;
      }
      if (Nullable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nullable);
      }
      if (Signed != false) {
        size += 1 + 1;
      }
      if (DisplaySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisplaySize);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      if (SchemaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaName);
      }
      if (Precision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Precision);
      }
      if (Scale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scale);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (CatalogName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CatalogName);
      }
      if (ReadOnly != false) {
        size += 2 + 1;
      }
      if (Writable != false) {
        size += 2 + 1;
      }
      if (DefinitelyWritable != false) {
        size += 2 + 1;
      }
      if (ColumnClassName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ColumnClassName);
      }
      if (type_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnMetaData other) {
      if (other == null) {
        return;
      }
      if (other.Ordinal != 0) {
        Ordinal = other.Ordinal;
      }
      if (other.AutoIncrement != false) {
        AutoIncrement = other.AutoIncrement;
      }
      if (other.CaseSensitive != false) {
        CaseSensitive = other.CaseSensitive;
      }
      if (other.Searchable != false) {
        Searchable = other.Searchable;
      }
      if (other.Currency != false) {
        Currency = other.Currency;
      }
      if (other.Nullable != 0) {
        Nullable = other.Nullable;
      }
      if (other.Signed != false) {
        Signed = other.Signed;
      }
      if (other.DisplaySize != 0) {
        DisplaySize = other.DisplaySize;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
      if (other.SchemaName.Length != 0) {
        SchemaName = other.SchemaName;
      }
      if (other.Precision != 0) {
        Precision = other.Precision;
      }
      if (other.Scale != 0) {
        Scale = other.Scale;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.CatalogName.Length != 0) {
        CatalogName = other.CatalogName;
      }
      if (other.ReadOnly != false) {
        ReadOnly = other.ReadOnly;
      }
      if (other.Writable != false) {
        Writable = other.Writable;
      }
      if (other.DefinitelyWritable != false) {
        DefinitelyWritable = other.DefinitelyWritable;
      }
      if (other.ColumnClassName.Length != 0) {
        ColumnClassName = other.ColumnClassName;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          type_ = new global::Apache.Phoenix.AvaticaType();
        }
        Type.MergeFrom(other.Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ordinal = input.ReadUInt32();
            break;
          }
          case 16: {
            AutoIncrement = input.ReadBool();
            break;
          }
          case 24: {
            CaseSensitive = input.ReadBool();
            break;
          }
          case 32: {
            Searchable = input.ReadBool();
            break;
          }
          case 40: {
            Currency = input.ReadBool();
            break;
          }
          case 48: {
            Nullable = input.ReadUInt32();
            break;
          }
          case 56: {
            Signed = input.ReadBool();
            break;
          }
          case 64: {
            DisplaySize = input.ReadUInt32();
            break;
          }
          case 74: {
            Label = input.ReadString();
            break;
          }
          case 82: {
            ColumnName = input.ReadString();
            break;
          }
          case 90: {
            SchemaName = input.ReadString();
            break;
          }
          case 96: {
            Precision = input.ReadUInt32();
            break;
          }
          case 104: {
            Scale = input.ReadUInt32();
            break;
          }
          case 114: {
            TableName = input.ReadString();
            break;
          }
          case 122: {
            CatalogName = input.ReadString();
            break;
          }
          case 128: {
            ReadOnly = input.ReadBool();
            break;
          }
          case 136: {
            Writable = input.ReadBool();
            break;
          }
          case 144: {
            DefinitelyWritable = input.ReadBool();
            break;
          }
          case 154: {
            ColumnClassName = input.ReadString();
            break;
          }
          case 162: {
            if (type_ == null) {
              type_ = new global::Apache.Phoenix.AvaticaType();
            }
            input.ReadMessage(type_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Base class for a column type
  /// </summary>
  public sealed partial class AvaticaType : pb::IMessage<AvaticaType> {
    private static readonly pb::MessageParser<AvaticaType> _parser = new pb::MessageParser<AvaticaType>(() => new AvaticaType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AvaticaType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvaticaType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvaticaType(AvaticaType other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      rep_ = other.rep_;
      columns_ = other.columns_.Clone();
      Component = other.component_ != null ? other.Component.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvaticaType Clone() {
      return new AvaticaType(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rep" field.</summary>
    public const int RepFieldNumber = 3;
    private global::Apache.Phoenix.Rep rep_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.Rep Rep {
      get { return rep_; }
      set {
        rep_ = value;
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.ColumnMetaData> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(34, global::Apache.Phoenix.ColumnMetaData.Parser);
    private readonly pbc::RepeatedField<global::Apache.Phoenix.ColumnMetaData> columns_ = new pbc::RepeatedField<global::Apache.Phoenix.ColumnMetaData>();
    /// <summary>
    ///  Only present when name = STRUCT
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apache.Phoenix.ColumnMetaData> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "component" field.</summary>
    public const int ComponentFieldNumber = 5;
    private global::Apache.Phoenix.AvaticaType component_;
    /// <summary>
    ///  Only present when name = ARRAY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.AvaticaType Component {
      get { return component_; }
      set {
        component_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AvaticaType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AvaticaType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Rep != other.Rep) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (!object.Equals(Component, other.Component)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Rep != 0) hash ^= Rep.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (component_ != null) hash ^= Component.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Rep != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Rep);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (component_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Component);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Rep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rep);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (component_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Component);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AvaticaType other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Rep != 0) {
        Rep = other.Rep;
      }
      columns_.Add(other.columns_);
      if (other.component_ != null) {
        if (component_ == null) {
          component_ = new global::Apache.Phoenix.AvaticaType();
        }
        Component.MergeFrom(other.Component);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            rep_ = (global::Apache.Phoenix.Rep) input.ReadEnum();
            break;
          }
          case 34: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 42: {
            if (component_ == null) {
              component_ = new global::Apache.Phoenix.AvaticaType();
            }
            input.ReadMessage(component_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Metadata for a parameter
  /// </summary>
  public sealed partial class AvaticaParameter : pb::IMessage<AvaticaParameter> {
    private static readonly pb::MessageParser<AvaticaParameter> _parser = new pb::MessageParser<AvaticaParameter>(() => new AvaticaParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AvaticaParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvaticaParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvaticaParameter(AvaticaParameter other) : this() {
      signed_ = other.signed_;
      precision_ = other.precision_;
      scale_ = other.scale_;
      parameterType_ = other.parameterType_;
      typeName_ = other.typeName_;
      className_ = other.className_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvaticaParameter Clone() {
      return new AvaticaParameter(this);
    }

    /// <summary>Field number for the "signed" field.</summary>
    public const int SignedFieldNumber = 1;
    private bool signed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Signed {
      get { return signed_; }
      set {
        signed_ = value;
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 2;
    private uint precision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private uint scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "parameter_type" field.</summary>
    public const int ParameterTypeFieldNumber = 4;
    private uint parameterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParameterType {
      get { return parameterType_; }
      set {
        parameterType_ = value;
      }
    }

    /// <summary>Field number for the "type_name" field.</summary>
    public const int TypeNameFieldNumber = 5;
    private string typeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_name" field.</summary>
    public const int ClassNameFieldNumber = 6;
    private string className_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassName {
      get { return className_; }
      set {
        className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AvaticaParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AvaticaParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signed != other.Signed) return false;
      if (Precision != other.Precision) return false;
      if (Scale != other.Scale) return false;
      if (ParameterType != other.ParameterType) return false;
      if (TypeName != other.TypeName) return false;
      if (ClassName != other.ClassName) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signed != false) hash ^= Signed.GetHashCode();
      if (Precision != 0) hash ^= Precision.GetHashCode();
      if (Scale != 0) hash ^= Scale.GetHashCode();
      if (ParameterType != 0) hash ^= ParameterType.GetHashCode();
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signed != false) {
        output.WriteRawTag(8);
        output.WriteBool(Signed);
      }
      if (Precision != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Precision);
      }
      if (Scale != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Scale);
      }
      if (ParameterType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ParameterType);
      }
      if (TypeName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TypeName);
      }
      if (ClassName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ClassName);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signed != false) {
        size += 1 + 1;
      }
      if (Precision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Precision);
      }
      if (Scale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scale);
      }
      if (ParameterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParameterType);
      }
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (ClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AvaticaParameter other) {
      if (other == null) {
        return;
      }
      if (other.Signed != false) {
        Signed = other.Signed;
      }
      if (other.Precision != 0) {
        Precision = other.Precision;
      }
      if (other.Scale != 0) {
        Scale = other.Scale;
      }
      if (other.ParameterType != 0) {
        ParameterType = other.ParameterType;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.ClassName.Length != 0) {
        ClassName = other.ClassName;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Signed = input.ReadBool();
            break;
          }
          case 16: {
            Precision = input.ReadUInt32();
            break;
          }
          case 24: {
            Scale = input.ReadUInt32();
            break;
          }
          case 32: {
            ParameterType = input.ReadUInt32();
            break;
          }
          case 42: {
            TypeName = input.ReadString();
            break;
          }
          case 50: {
            ClassName = input.ReadString();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Information necessary to convert an Iterable into a Calcite Cursor
  /// </summary>
  public sealed partial class CursorFactory : pb::IMessage<CursorFactory> {
    private static readonly pb::MessageParser<CursorFactory> _parser = new pb::MessageParser<CursorFactory>(() => new CursorFactory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CursorFactory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CursorFactory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CursorFactory(CursorFactory other) : this() {
      style_ = other.style_;
      className_ = other.className_;
      fieldNames_ = other.fieldNames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CursorFactory Clone() {
      return new CursorFactory(this);
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 1;
    private global::Apache.Phoenix.CursorFactory.Types.Style style_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.CursorFactory.Types.Style Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "class_name" field.</summary>
    public const int ClassNameFieldNumber = 2;
    private string className_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassName {
      get { return className_; }
      set {
        className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field_names" field.</summary>
    public const int FieldNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_fieldNames_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> fieldNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FieldNames {
      get { return fieldNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CursorFactory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CursorFactory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Style != other.Style) return false;
      if (ClassName != other.ClassName) return false;
      if(!fieldNames_.Equals(other.fieldNames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Style != 0) hash ^= Style.GetHashCode();
      if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
      hash ^= fieldNames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Style != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Style);
      }
      if (ClassName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassName);
      }
      fieldNames_.WriteTo(output, _repeated_fieldNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Style != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Style);
      }
      if (ClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
      }
      size += fieldNames_.CalculateSize(_repeated_fieldNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CursorFactory other) {
      if (other == null) {
        return;
      }
      if (other.Style != 0) {
        Style = other.Style;
      }
      if (other.ClassName.Length != 0) {
        ClassName = other.ClassName;
      }
      fieldNames_.Add(other.fieldNames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            style_ = (global::Apache.Phoenix.CursorFactory.Types.Style) input.ReadEnum();
            break;
          }
          case 18: {
            ClassName = input.ReadString();
            break;
          }
          case 26: {
            fieldNames_.AddEntriesFrom(input, _repeated_fieldNames_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CursorFactory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Style {
        [pbr::OriginalName("OBJECT")] Object = 0,
        [pbr::OriginalName("RECORD")] Record = 1,
        [pbr::OriginalName("RECORD_PROJECTION")] RecordProjection = 2,
        [pbr::OriginalName("ARRAY")] Array = 3,
        [pbr::OriginalName("LIST")] List = 4,
        [pbr::OriginalName("MAP")] Map = 5,
      }

    }
    #endregion

  }

  /// <summary>
  ///  A collection of rows
  /// </summary>
  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      offset_ = other.offset_;
      done_ = other.done_;
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private ulong offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "done" field.</summary>
    public const int DoneFieldNumber = 2;
    private bool done_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Done {
      get { return done_; }
      set {
        done_ = value;
      }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.Row> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(26, global::Apache.Phoenix.Row.Parser);
    private readonly pbc::RepeatedField<global::Apache.Phoenix.Row> rows_ = new pbc::RepeatedField<global::Apache.Phoenix.Row>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apache.Phoenix.Row> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Offset != other.Offset) return false;
      if (Done != other.Done) return false;
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Offset != 0UL) hash ^= Offset.GetHashCode();
      if (Done != false) hash ^= Done.GetHashCode();
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Offset != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Offset);
      }
      if (Done != false) {
        output.WriteRawTag(16);
        output.WriteBool(Done);
      }
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Offset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
      }
      if (Done != false) {
        size += 1 + 1;
      }
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.Offset != 0UL) {
        Offset = other.Offset;
      }
      if (other.Done != false) {
        Done = other.Done;
      }
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Offset = input.ReadUInt64();
            break;
          }
          case 16: {
            Done = input.ReadBool();
            break;
          }
          case 26: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A row is a collection of values
  /// </summary>
  public sealed partial class Row : pb::IMessage<Row> {
    private static readonly pb::MessageParser<Row> _parser = new pb::MessageParser<Row>(() => new Row());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Row> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Row() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Row(Row other) : this() {
      value_ = other.value_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Row Clone() {
      return new Row(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.ColumnValue> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::Apache.Phoenix.ColumnValue.Parser);
    private readonly pbc::RepeatedField<global::Apache.Phoenix.ColumnValue> value_ = new pbc::RepeatedField<global::Apache.Phoenix.ColumnValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apache.Phoenix.ColumnValue> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Row);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Row other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Row other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Database property, list of functions the database provides for a certain operation
  /// </summary>
  public sealed partial class DatabaseProperty : pb::IMessage<DatabaseProperty> {
    private static readonly pb::MessageParser<DatabaseProperty> _parser = new pb::MessageParser<DatabaseProperty>(() => new DatabaseProperty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseProperty(DatabaseProperty other) : this() {
      name_ = other.name_;
      functions_ = other.functions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseProperty Clone() {
      return new DatabaseProperty(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "functions" field.</summary>
    public const int FunctionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_functions_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> functions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Functions {
      get { return functions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!functions_.Equals(other.functions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= functions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      functions_.WriteTo(output, _repeated_functions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += functions_.CalculateSize(_repeated_functions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseProperty other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      functions_.Add(other.functions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            functions_.AddEntriesFrom(input, _repeated_functions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Message which encapsulates another message to support a single RPC endpoint
  /// </summary>
  public sealed partial class WireMessage : pb::IMessage<WireMessage> {
    private static readonly pb::MessageParser<WireMessage> _parser = new pb::MessageParser<WireMessage>(() => new WireMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WireMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WireMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WireMessage(WireMessage other) : this() {
      name_ = other.name_;
      wrappedMessage_ = other.wrappedMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WireMessage Clone() {
      return new WireMessage(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wrapped_message" field.</summary>
    public const int WrappedMessageFieldNumber = 2;
    private pb::ByteString wrappedMessage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WrappedMessage {
      get { return wrappedMessage_; }
      set {
        wrappedMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WireMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WireMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (WrappedMessage != other.WrappedMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (WrappedMessage.Length != 0) hash ^= WrappedMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (WrappedMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(WrappedMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (WrappedMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WrappedMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WireMessage other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.WrappedMessage.Length != 0) {
        WrappedMessage = other.WrappedMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            WrappedMessage = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A value might be a TypedValue or an Array of TypedValue's
  /// </summary>
  public sealed partial class ColumnValue : pb::IMessage<ColumnValue> {
    private static readonly pb::MessageParser<ColumnValue> _parser = new pb::MessageParser<ColumnValue>(() => new ColumnValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnValue(ColumnValue other) : this() {
      value_ = other.value_.Clone();
      arrayValue_ = other.arrayValue_.Clone();
      hasArrayValue_ = other.hasArrayValue_;
      ScalarValue = other.scalarValue_ != null ? other.ScalarValue.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnValue Clone() {
      return new ColumnValue(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.TypedValue> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::Apache.Phoenix.TypedValue.Parser);
    private readonly pbc::RepeatedField<global::Apache.Phoenix.TypedValue> value_ = new pbc::RepeatedField<global::Apache.Phoenix.TypedValue>();
    /// <summary>
    ///  deprecated, use array_value or scalar_value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apache.Phoenix.TypedValue> Value {
      get { return value_; }
    }

    /// <summary>Field number for the "array_value" field.</summary>
    public const int ArrayValueFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.TypedValue> _repeated_arrayValue_codec
        = pb::FieldCodec.ForMessage(18, global::Apache.Phoenix.TypedValue.Parser);
    private readonly pbc::RepeatedField<global::Apache.Phoenix.TypedValue> arrayValue_ = new pbc::RepeatedField<global::Apache.Phoenix.TypedValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apache.Phoenix.TypedValue> ArrayValue {
      get { return arrayValue_; }
    }

    /// <summary>Field number for the "has_array_value" field.</summary>
    public const int HasArrayValueFieldNumber = 3;
    private bool hasArrayValue_;
    /// <summary>
    ///  Is an array value set?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArrayValue {
      get { return hasArrayValue_; }
      set {
        hasArrayValue_ = value;
      }
    }

    /// <summary>Field number for the "scalar_value" field.</summary>
    public const int ScalarValueFieldNumber = 4;
    private global::Apache.Phoenix.TypedValue scalarValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.TypedValue ScalarValue {
      get { return scalarValue_; }
      set {
        scalarValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      if(!arrayValue_.Equals(other.arrayValue_)) return false;
      if (HasArrayValue != other.HasArrayValue) return false;
      if (!object.Equals(ScalarValue, other.ScalarValue)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      hash ^= arrayValue_.GetHashCode();
      if (HasArrayValue != false) hash ^= HasArrayValue.GetHashCode();
      if (scalarValue_ != null) hash ^= ScalarValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      arrayValue_.WriteTo(output, _repeated_arrayValue_codec);
      if (HasArrayValue != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasArrayValue);
      }
      if (scalarValue_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ScalarValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      size += arrayValue_.CalculateSize(_repeated_arrayValue_codec);
      if (HasArrayValue != false) {
        size += 1 + 1;
      }
      if (scalarValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalarValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnValue other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      arrayValue_.Add(other.arrayValue_);
      if (other.HasArrayValue != false) {
        HasArrayValue = other.HasArrayValue;
      }
      if (other.scalarValue_ != null) {
        if (scalarValue_ == null) {
          scalarValue_ = new global::Apache.Phoenix.TypedValue();
        }
        ScalarValue.MergeFrom(other.ScalarValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
          case 18: {
            arrayValue_.AddEntriesFrom(input, _repeated_arrayValue_codec);
            break;
          }
          case 24: {
            HasArrayValue = input.ReadBool();
            break;
          }
          case 34: {
            if (scalarValue_ == null) {
              scalarValue_ = new global::Apache.Phoenix.TypedValue();
            }
            input.ReadMessage(scalarValue_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Generic wrapper to support any SQL type. Struct-like to work around no polymorphism construct.
  /// </summary>
  public sealed partial class TypedValue : pb::IMessage<TypedValue> {
    private static readonly pb::MessageParser<TypedValue> _parser = new pb::MessageParser<TypedValue>(() => new TypedValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypedValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypedValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypedValue(TypedValue other) : this() {
      type_ = other.type_;
      boolValue_ = other.boolValue_;
      stringValue_ = other.stringValue_;
      numberValue_ = other.numberValue_;
      bytesValue_ = other.bytesValue_;
      doubleValue_ = other.doubleValue_;
      null_ = other.null_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypedValue Clone() {
      return new TypedValue(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Apache.Phoenix.Rep type_ = 0;
    /// <summary>
    ///  The actual type that was serialized in the general attribute below
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.Rep Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 2;
    private bool boolValue_;
    /// <summary>
    ///  boolean
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return boolValue_; }
      set {
        boolValue_ = value;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 3;
    private string stringValue_ = "";
    /// <summary>
    ///  char/varchar
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return stringValue_; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number_value" field.</summary>
    public const int NumberValueFieldNumber = 4;
    private long numberValue_;
    /// <summary>
    ///  var-len encoding lets us shove anything from byte to long
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumberValue {
      get { return numberValue_; }
      set {
        numberValue_ = value;
      }
    }

    /// <summary>Field number for the "bytes_value" field.</summary>
    public const int BytesValueFieldNumber = 5;
    private pb::ByteString bytesValue_ = pb::ByteString.Empty;
    /// <summary>
    ///  includes numeric types and date/time types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return bytesValue_; }
      set {
        bytesValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 6;
    private double doubleValue_;
    /// <summary>
    ///  big numbers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return doubleValue_; }
      set {
        doubleValue_ = value;
      }
    }

    /// <summary>Field number for the "null" field.</summary>
    public const int NullFieldNumber = 7;
    private bool null_;
    /// <summary>
    ///  a null object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Null {
      get { return null_; }
      set {
        null_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypedValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypedValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (BoolValue != other.BoolValue) return false;
      if (StringValue != other.StringValue) return false;
      if (NumberValue != other.NumberValue) return false;
      if (BytesValue != other.BytesValue) return false;
      if (DoubleValue != other.DoubleValue) return false;
      if (Null != other.Null) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (BoolValue != false) hash ^= BoolValue.GetHashCode();
      if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
      if (NumberValue != 0L) hash ^= NumberValue.GetHashCode();
      if (BytesValue.Length != 0) hash ^= BytesValue.GetHashCode();
      if (DoubleValue != 0D) hash ^= DoubleValue.GetHashCode();
      if (Null != false) hash ^= Null.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (BoolValue != false) {
        output.WriteRawTag(16);
        output.WriteBool(BoolValue);
      }
      if (StringValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StringValue);
      }
      if (NumberValue != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(NumberValue);
      }
      if (BytesValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(BytesValue);
      }
      if (DoubleValue != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(DoubleValue);
      }
      if (Null != false) {
        output.WriteRawTag(56);
        output.WriteBool(Null);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (BoolValue != false) {
        size += 1 + 1;
      }
      if (StringValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (NumberValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(NumberValue);
      }
      if (BytesValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (DoubleValue != 0D) {
        size += 1 + 8;
      }
      if (Null != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypedValue other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.BoolValue != false) {
        BoolValue = other.BoolValue;
      }
      if (other.StringValue.Length != 0) {
        StringValue = other.StringValue;
      }
      if (other.NumberValue != 0L) {
        NumberValue = other.NumberValue;
      }
      if (other.BytesValue.Length != 0) {
        BytesValue = other.BytesValue;
      }
      if (other.DoubleValue != 0D) {
        DoubleValue = other.DoubleValue;
      }
      if (other.Null != false) {
        Null = other.Null;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Apache.Phoenix.Rep) input.ReadEnum();
            break;
          }
          case 16: {
            BoolValue = input.ReadBool();
            break;
          }
          case 26: {
            StringValue = input.ReadString();
            break;
          }
          case 32: {
            NumberValue = input.ReadSInt64();
            break;
          }
          case 42: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 49: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 56: {
            Null = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Represents the breadth of arguments to DatabaseMetaData functions
  /// </summary>
  public sealed partial class MetaDataOperationArgument : pb::IMessage<MetaDataOperationArgument> {
    private static readonly pb::MessageParser<MetaDataOperationArgument> _parser = new pb::MessageParser<MetaDataOperationArgument>(() => new MetaDataOperationArgument());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetaDataOperationArgument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaDataOperationArgument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaDataOperationArgument(MetaDataOperationArgument other) : this() {
      stringValue_ = other.stringValue_;
      boolValue_ = other.boolValue_;
      intValue_ = other.intValue_;
      stringArrayValues_ = other.stringArrayValues_.Clone();
      intArrayValues_ = other.intArrayValues_.Clone();
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaDataOperationArgument Clone() {
      return new MetaDataOperationArgument(this);
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 1;
    private string stringValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return stringValue_; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 2;
    private bool boolValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return boolValue_; }
      set {
        boolValue_ = value;
      }
    }

    /// <summary>Field number for the "int_value" field.</summary>
    public const int IntValueFieldNumber = 3;
    private int intValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntValue {
      get { return intValue_; }
      set {
        intValue_ = value;
      }
    }

    /// <summary>Field number for the "string_array_values" field.</summary>
    public const int StringArrayValuesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_stringArrayValues_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> stringArrayValues_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StringArrayValues {
      get { return stringArrayValues_; }
    }

    /// <summary>Field number for the "int_array_values" field.</summary>
    public const int IntArrayValuesFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_intArrayValues_codec
        = pb::FieldCodec.ForSInt32(42);
    private readonly pbc::RepeatedField<int> intArrayValues_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntArrayValues {
      get { return intArrayValues_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private global::Apache.Phoenix.MetaDataOperationArgument.Types.ArgumentType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.MetaDataOperationArgument.Types.ArgumentType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetaDataOperationArgument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetaDataOperationArgument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StringValue != other.StringValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (IntValue != other.IntValue) return false;
      if(!stringArrayValues_.Equals(other.stringArrayValues_)) return false;
      if(!intArrayValues_.Equals(other.intArrayValues_)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
      if (BoolValue != false) hash ^= BoolValue.GetHashCode();
      if (IntValue != 0) hash ^= IntValue.GetHashCode();
      hash ^= stringArrayValues_.GetHashCode();
      hash ^= intArrayValues_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StringValue.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StringValue);
      }
      if (BoolValue != false) {
        output.WriteRawTag(16);
        output.WriteBool(BoolValue);
      }
      if (IntValue != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(IntValue);
      }
      stringArrayValues_.WriteTo(output, _repeated_stringArrayValues_codec);
      intArrayValues_.WriteTo(output, _repeated_intArrayValues_codec);
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StringValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (BoolValue != false) {
        size += 1 + 1;
      }
      if (IntValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IntValue);
      }
      size += stringArrayValues_.CalculateSize(_repeated_stringArrayValues_codec);
      size += intArrayValues_.CalculateSize(_repeated_intArrayValues_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetaDataOperationArgument other) {
      if (other == null) {
        return;
      }
      if (other.StringValue.Length != 0) {
        StringValue = other.StringValue;
      }
      if (other.BoolValue != false) {
        BoolValue = other.BoolValue;
      }
      if (other.IntValue != 0) {
        IntValue = other.IntValue;
      }
      stringArrayValues_.Add(other.stringArrayValues_);
      intArrayValues_.Add(other.intArrayValues_);
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StringValue = input.ReadString();
            break;
          }
          case 16: {
            BoolValue = input.ReadBool();
            break;
          }
          case 24: {
            IntValue = input.ReadSInt32();
            break;
          }
          case 34: {
            stringArrayValues_.AddEntriesFrom(input, _repeated_stringArrayValues_codec);
            break;
          }
          case 42:
          case 40: {
            intArrayValues_.AddEntriesFrom(input, _repeated_intArrayValues_codec);
            break;
          }
          case 48: {
            type_ = (global::Apache.Phoenix.MetaDataOperationArgument.Types.ArgumentType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MetaDataOperationArgument message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ArgumentType {
        [pbr::OriginalName("STRING")] String = 0,
        [pbr::OriginalName("BOOL")] Bool = 1,
        [pbr::OriginalName("INT")] Int = 2,
        [pbr::OriginalName("REPEATED_STRING")] RepeatedString = 3,
        [pbr::OriginalName("REPEATED_INT")] RepeatedInt = 4,
        [pbr::OriginalName("NULL")] Null = 5,
      }

    }
    #endregion

  }

  public sealed partial class QueryState : pb::IMessage<QueryState> {
    private static readonly pb::MessageParser<QueryState> _parser = new pb::MessageParser<QueryState>(() => new QueryState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apache.Phoenix.CommonReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryState(QueryState other) : this() {
      type_ = other.type_;
      sql_ = other.sql_;
      op_ = other.op_;
      args_ = other.args_.Clone();
      hasArgs_ = other.hasArgs_;
      hasSql_ = other.hasSql_;
      hasOp_ = other.hasOp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryState Clone() {
      return new QueryState(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Apache.Phoenix.StateType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.StateType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sql" field.</summary>
    public const int SqlFieldNumber = 2;
    private string sql_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sql {
      get { return sql_; }
      set {
        sql_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 3;
    private global::Apache.Phoenix.MetaDataOperation op_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apache.Phoenix.MetaDataOperation Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apache.Phoenix.MetaDataOperationArgument> _repeated_args_codec
        = pb::FieldCodec.ForMessage(34, global::Apache.Phoenix.MetaDataOperationArgument.Parser);
    private readonly pbc::RepeatedField<global::Apache.Phoenix.MetaDataOperationArgument> args_ = new pbc::RepeatedField<global::Apache.Phoenix.MetaDataOperationArgument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apache.Phoenix.MetaDataOperationArgument> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "has_args" field.</summary>
    public const int HasArgsFieldNumber = 5;
    private bool hasArgs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArgs {
      get { return hasArgs_; }
      set {
        hasArgs_ = value;
      }
    }

    /// <summary>Field number for the "has_sql" field.</summary>
    public const int HasSqlFieldNumber = 6;
    private bool hasSql_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSql {
      get { return hasSql_; }
      set {
        hasSql_ = value;
      }
    }

    /// <summary>Field number for the "has_op" field.</summary>
    public const int HasOpFieldNumber = 7;
    private bool hasOp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOp {
      get { return hasOp_; }
      set {
        hasOp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Sql != other.Sql) return false;
      if (Op != other.Op) return false;
      if(!args_.Equals(other.args_)) return false;
      if (HasArgs != other.HasArgs) return false;
      if (HasSql != other.HasSql) return false;
      if (HasOp != other.HasOp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Sql.Length != 0) hash ^= Sql.GetHashCode();
      if (Op != 0) hash ^= Op.GetHashCode();
      hash ^= args_.GetHashCode();
      if (HasArgs != false) hash ^= HasArgs.GetHashCode();
      if (HasSql != false) hash ^= HasSql.GetHashCode();
      if (HasOp != false) hash ^= HasOp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Sql.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sql);
      }
      if (Op != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Op);
      }
      args_.WriteTo(output, _repeated_args_codec);
      if (HasArgs != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasArgs);
      }
      if (HasSql != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasSql);
      }
      if (HasOp != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasOp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Sql.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sql);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      if (HasArgs != false) {
        size += 1 + 1;
      }
      if (HasSql != false) {
        size += 1 + 1;
      }
      if (HasOp != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryState other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Sql.Length != 0) {
        Sql = other.Sql;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      args_.Add(other.args_);
      if (other.HasArgs != false) {
        HasArgs = other.HasArgs;
      }
      if (other.HasSql != false) {
        HasSql = other.HasSql;
      }
      if (other.HasOp != false) {
        HasOp = other.HasOp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Apache.Phoenix.StateType) input.ReadEnum();
            break;
          }
          case 18: {
            Sql = input.ReadString();
            break;
          }
          case 24: {
            op_ = (global::Apache.Phoenix.MetaDataOperation) input.ReadEnum();
            break;
          }
          case 34: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 40: {
            HasArgs = input.ReadBool();
            break;
          }
          case 48: {
            HasSql = input.ReadBool();
            break;
          }
          case 56: {
            HasOp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
